<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="357.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="357.00"> </text><svg id="frames" x="10" width="1180" total_samples="62616"><g><title>ntdll`LdrLoadDll (8 samples, 0.01%)</title><rect x="0.0016%" y="245" width="0.0128%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="8"/><text x="0.2516%" y="255.50"></text></g><g><title>ntdll`RtlUnicodeToCustomCPN (8 samples, 0.01%)</title><rect x="0.0016%" y="229" width="0.0128%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="8"/><text x="0.2516%" y="239.50"></text></g><g><title>ntdll`RtlImageRvaToSection (8 samples, 0.01%)</title><rect x="0.0016%" y="213" width="0.0128%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="8"/><text x="0.2516%" y="223.50"></text></g><g><title>ntdll`RtlActivateActivationContextUnsafeFast (8 samples, 0.01%)</title><rect x="0.0240%" y="197" width="0.0128%" height="15" fill="rgb(248,212,6)" fg:x="15" fg:w="8"/><text x="0.2740%" y="207.50"></text></g><g><title>user32`UserClientDllInitialize (7 samples, 0.01%)</title><rect x="0.0256%" y="181" width="0.0112%" height="15" fill="rgb(208,68,35)" fg:x="16" fg:w="7"/><text x="0.2756%" y="191.50"></text></g><g><title>ntdll`RtlEnumerateEntryHashTable (10 samples, 0.02%)</title><rect x="0.0240%" y="245" width="0.0160%" height="15" fill="rgb(232,128,0)" fg:x="15" fg:w="10"/><text x="0.2740%" y="255.50"></text></g><g><title>ntdll`RtlEnumerateEntryHashTable (10 samples, 0.02%)</title><rect x="0.0240%" y="229" width="0.0160%" height="15" fill="rgb(207,160,47)" fg:x="15" fg:w="10"/><text x="0.2740%" y="239.50"></text></g><g><title>ntdll`RtlEnumerateEntryHashTable (10 samples, 0.02%)</title><rect x="0.0240%" y="213" width="0.0160%" height="15" fill="rgb(228,23,34)" fg:x="15" fg:w="10"/><text x="0.2740%" y="223.50"></text></g><g><title>apphelp`SE_InitializeEngine (7 samples, 0.01%)</title><rect x="0.0511%" y="229" width="0.0112%" height="15" fill="rgb(218,30,26)" fg:x="32" fg:w="7"/><text x="0.3011%" y="239.50"></text></g><g><title>ntdll`RtlImpersonateSelfEx (13 samples, 0.02%)</title><rect x="0.0511%" y="245" width="0.0208%" height="15" fill="rgb(220,122,19)" fg:x="32" fg:w="13"/><text x="0.3011%" y="255.50"></text></g><g><title>ntdll`LdrInitializeThunk (46 samples, 0.07%)</title><rect x="0.0000%" y="309" width="0.0735%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="46"/><text x="0.2500%" y="319.50"></text></g><g><title>ntdll`LdrInitializeThunk (46 samples, 0.07%)</title><rect x="0.0000%" y="293" width="0.0735%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="46"/><text x="0.2500%" y="303.50"></text></g><g><title>ntdll`EtwLogTraceEvent (46 samples, 0.07%)</title><rect x="0.0000%" y="277" width="0.0735%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="46"/><text x="0.2500%" y="287.50"></text></g><g><title>ntdll`EtwLogTraceEvent (46 samples, 0.07%)</title><rect x="0.0000%" y="261" width="0.0735%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="46"/><text x="0.2500%" y="271.50"></text></g><g><title>rust-obj-terminal-viewer`alloc::vec::impl$14::clone (49 samples, 0.08%)</title><rect x="0.1645%" y="165" width="0.0783%" height="15" fill="rgb(217,207,13)" fg:x="103" fg:w="49"/><text x="0.4145%" y="175.50"></text></g><g><title>rust-obj-terminal-viewer`rust_obj_terminal_viewer::renderer::interface::Renderer::set_mesh (95 samples, 0.15%)</title><rect x="0.0958%" y="181" width="0.1517%" height="15" fill="rgb(231,73,38)" fg:x="60" fg:w="95"/><text x="0.3458%" y="191.50"></text></g><g><title>rust-obj-terminal-viewer`rust_obj_terminal_viewer::renderer::events::get_events_from_queue (12 samples, 0.02%)</title><rect x="0.2731%" y="165" width="0.0192%" height="15" fill="rgb(225,20,46)" fg:x="171" fg:w="12"/><text x="0.5231%" y="175.50"></text></g><g><title>rust-obj-terminal-viewer`crossterm::event::poll (12 samples, 0.02%)</title><rect x="0.2731%" y="149" width="0.0192%" height="15" fill="rgb(210,31,41)" fg:x="171" fg:w="12"/><text x="0.5231%" y="159.50"></text></g><g><title>rust-obj-terminal-viewer`crossterm::event::read::InternalEventReader::poll (12 samples, 0.02%)</title><rect x="0.2731%" y="133" width="0.0192%" height="15" fill="rgb(221,200,47)" fg:x="171" fg:w="12"/><text x="0.5231%" y="143.50"></text></g><g><title>rust-obj-terminal-viewer`crossterm::event::source::windows::impl$1::try_read (12 samples, 0.02%)</title><rect x="0.2731%" y="117" width="0.0192%" height="15" fill="rgb(226,26,5)" fg:x="171" fg:w="12"/><text x="0.5231%" y="127.50"></text></g><g><title>rust-obj-terminal-viewer`core::fmt::write (7 samples, 0.01%)</title><rect x="0.2986%" y="133" width="0.0112%" height="15" fill="rgb(249,33,26)" fg:x="187" fg:w="7"/><text x="0.5486%" y="143.50"></text></g><g><title>rust-obj-terminal-viewer`crossterm::command::write_command_ansi (8 samples, 0.01%)</title><rect x="0.2986%" y="149" width="0.0128%" height="15" fill="rgb(235,183,28)" fg:x="187" fg:w="8"/><text x="0.5486%" y="159.50"></text></g><g><title>rust-obj-terminal-viewer`rust_obj_terminal_viewer::renderer::pipeline::terminal_output::draw_char_buffer (21 samples, 0.03%)</title><rect x="0.2923%" y="165" width="0.0335%" height="15" fill="rgb(221,5,38)" fg:x="183" fg:w="21"/><text x="0.5423%" y="175.50"></text></g><g><title>rust-obj-terminal-viewer`std::io::stdio::impl$11::write (7 samples, 0.01%)</title><rect x="0.3146%" y="149" width="0.0112%" height="15" fill="rgb(247,18,42)" fg:x="197" fg:w="7"/><text x="0.5646%" y="159.50"></text></g><g><title>rust-obj-terminal-viewer`std::io::stdio::impl$12::write (7 samples, 0.01%)</title><rect x="0.3146%" y="133" width="0.0112%" height="15" fill="rgb(241,131,45)" fg:x="197" fg:w="7"/><text x="0.5646%" y="143.50"></text></g><g><title>rust-obj-terminal-viewer`std::io::buffered::bufwriter::BufWriter::write_cold (7 samples, 0.01%)</title><rect x="0.3146%" y="117" width="0.0112%" height="15" fill="rgb(249,31,29)" fg:x="197" fg:w="7"/><text x="0.5646%" y="127.50"></text></g><g><title>rust-obj-terminal-viewer`rust_obj_terminal_viewer::renderer::pipeline::terminal_output::image_buffer_to_char_buffer (33 samples, 0.05%)</title><rect x="0.3258%" y="165" width="0.0527%" height="15" fill="rgb(225,111,53)" fg:x="204" fg:w="33"/><text x="0.5758%" y="175.50"></text></g><g><title>ucrtbase`ceilf (8 samples, 0.01%)</title><rect x="0.3657%" y="149" width="0.0128%" height="15" fill="rgb(238,160,17)" fg:x="229" fg:w="8"/><text x="0.6157%" y="159.50"></text></g><g><title>rust-obj-terminal-viewer`core::array::impl$24::map (88 samples, 0.14%)</title><rect x="1.4693%" y="149" width="0.1405%" height="15" fill="rgb(214,148,48)" fg:x="920" fg:w="88"/><text x="1.7193%" y="159.50"></text></g><g><title>rust-obj-terminal-viewer`rust_obj_terminal_viewer::general::positions_3d::Triangle::add_point (3,224 samples, 5.15%)</title><rect x="1.6098%" y="149" width="5.1488%" height="15" fill="rgb(232,36,49)" fg:x="1008" fg:w="3224"/><text x="1.8598%" y="159.50">rust-o..</text></g><g><title>rust-obj-terminal-viewer`rust_obj_terminal_viewer::general::positions_3d::Triangle::multiply_with_point (4,922 samples, 7.86%)</title><rect x="6.7587%" y="149" width="7.8606%" height="15" fill="rgb(209,103,24)" fg:x="4232" fg:w="4922"/><text x="7.0087%" y="159.50">rust-obj-te..</text></g><g><title>KERNEL32`HeapFree (22 samples, 0.04%)</title><rect x="21.4163%" y="133" width="0.0351%" height="15" fill="rgb(229,88,8)" fg:x="13410" fg:w="22"/><text x="21.6663%" y="143.50"></text></g><g><title>ntdll`RtlAllocateHeap (530 samples, 0.85%)</title><rect x="30.8244%" y="101" width="0.8464%" height="15" fill="rgb(213,181,19)" fg:x="19301" fg:w="530"/><text x="31.0744%" y="111.50"></text></g><g><title>ntdll`RtlAllocateHeap (7,491 samples, 11.96%)</title><rect x="21.4546%" y="133" width="11.9634%" height="15" fill="rgb(254,191,54)" fg:x="13434" fg:w="7491"/><text x="21.7046%" y="143.50">ntdll`RtlAllocateH..</text></g><g><title>ntdll`RtlAllocateHeap (5,587 samples, 8.92%)</title><rect x="24.4953%" y="117" width="8.9226%" height="15" fill="rgb(241,83,37)" fg:x="15338" fg:w="5587"/><text x="24.7453%" y="127.50">ntdll`RtlAllo..</text></g><g><title>ntdll`RtlUnhandledExceptionFilter (1,094 samples, 1.75%)</title><rect x="31.6708%" y="101" width="1.7472%" height="15" fill="rgb(233,36,39)" fg:x="19831" fg:w="1094"/><text x="31.9208%" y="111.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (1,262 samples, 2.02%)</title><rect x="34.5167%" y="117" width="2.0155%" height="15" fill="rgb(226,3,54)" fg:x="21613" fg:w="1262"/><text x="34.7667%" y="127.50">n..</text></g><g><title>ntdll`RtlFreeHeap (107 samples, 0.17%)</title><rect x="36.3613%" y="101" width="0.1709%" height="15" fill="rgb(245,192,40)" fg:x="22768" fg:w="107"/><text x="36.6113%" y="111.50"></text></g><g><title>ntdll`RtlFreeHeap (5,820 samples, 9.29%)</title><rect x="33.4180%" y="133" width="9.2947%" height="15" fill="rgb(238,167,29)" fg:x="20925" fg:w="5820"/><text x="33.6680%" y="143.50">ntdll`RtlFree..</text></g><g><title>ntdll`RtlMoveMemory (3,870 samples, 6.18%)</title><rect x="36.5322%" y="117" width="6.1805%" height="15" fill="rgb(232,182,51)" fg:x="22875" fg:w="3870"/><text x="36.7822%" y="127.50">ntdll`Rt..</text></g><g><title>rust-obj-terminal-viewer`_rust_alloc (15 samples, 0.02%)</title><rect x="42.7127%" y="133" width="0.0240%" height="15" fill="rgb(231,60,39)" fg:x="26745" fg:w="15"/><text x="42.9627%" y="143.50"></text></g><g><title>rust-obj-terminal-viewer`_rust_dealloc (18 samples, 0.03%)</title><rect x="42.7367%" y="133" width="0.0287%" height="15" fill="rgb(208,69,12)" fg:x="26760" fg:w="18"/><text x="42.9867%" y="143.50"></text></g><g><title>rust-obj-terminal-viewer`alloc::slice::merge_sort&lt;ref$&lt;rust_obj_terminal_viewer::general::positions_2d::Point&gt;,alloc::slice::impl$0::sort_by::closure_env$0&lt;ref$ (5,329 samples, 8.51%)</title><rect x="42.7654%" y="133" width="8.5106%" height="15" fill="rgb(235,93,37)" fg:x="26778" fg:w="5329"/><text x="43.0154%" y="143.50">rust-obj-ter..</text></g><g><title>ntdll`RtlAllocateHeap (183 samples, 0.29%)</title><rect x="63.6403%" y="53" width="0.2923%" height="15" fill="rgb(213,116,39)" fg:x="39849" fg:w="183"/><text x="63.8903%" y="63.50"></text></g><g><title>ntdll`RtlAllocateHeap (2,178 samples, 3.48%)</title><rect x="61.0818%" y="85" width="3.4783%" height="15" fill="rgb(222,207,29)" fg:x="38247" fg:w="2178"/><text x="61.3318%" y="95.50">ntd..</text></g><g><title>ntdll`RtlAllocateHeap (1,742 samples, 2.78%)</title><rect x="61.7781%" y="69" width="2.7820%" height="15" fill="rgb(206,96,30)" fg:x="38683" fg:w="1742"/><text x="62.0281%" y="79.50">nt..</text></g><g><title>ntdll`RtlUnhandledExceptionFilter (393 samples, 0.63%)</title><rect x="63.9325%" y="53" width="0.6276%" height="15" fill="rgb(218,138,4)" fg:x="40032" fg:w="393"/><text x="64.1825%" y="63.50"></text></g><g><title>ntdll`RtlFreeHeap (7 samples, 0.01%)</title><rect x="64.5761%" y="37" width="0.0112%" height="15" fill="rgb(250,191,14)" fg:x="40435" fg:w="7"/><text x="64.8261%" y="47.50"></text></g><g><title>ntdll`RtlReAllocateHeap (18 samples, 0.03%)</title><rect x="64.5602%" y="85" width="0.0287%" height="15" fill="rgb(239,60,40)" fg:x="40425" fg:w="18"/><text x="64.8102%" y="95.50"></text></g><g><title>ntdll`RtlReAllocateHeap (18 samples, 0.03%)</title><rect x="64.5602%" y="69" width="0.0287%" height="15" fill="rgb(206,27,48)" fg:x="40425" fg:w="18"/><text x="64.8102%" y="79.50"></text></g><g><title>ntdll`RtlReAllocateHeap (13 samples, 0.02%)</title><rect x="64.5682%" y="53" width="0.0208%" height="15" fill="rgb(225,35,8)" fg:x="40430" fg:w="13"/><text x="64.8182%" y="63.50"></text></g><g><title>rust-obj-terminal-viewer`_rust_alloc (17 samples, 0.03%)</title><rect x="64.5889%" y="85" width="0.0271%" height="15" fill="rgb(250,213,24)" fg:x="40443" fg:w="17"/><text x="64.8389%" y="95.50"></text></g><g><title>rust-obj-terminal-viewer`alloc::raw_vec::RawVec&lt;usize,alloc::alloc::Global&gt;::reserve_for_push (2,662 samples, 4.25%)</title><rect x="60.4334%" y="117" width="4.2513%" height="15" fill="rgb(247,123,22)" fg:x="37841" fg:w="2662"/><text x="60.6834%" y="127.50">rust-..</text></g><g><title>rust-obj-terminal-viewer`alloc::raw_vec::finish_grow (2,424 samples, 3.87%)</title><rect x="60.8135%" y="101" width="3.8712%" height="15" fill="rgb(231,138,38)" fg:x="38079" fg:w="2424"/><text x="61.0635%" y="111.50">rust..</text></g><g><title>rust-obj-terminal-viewer`std::alloc::__default_lib_allocator::__rdl_alloc (43 samples, 0.07%)</title><rect x="64.6161%" y="85" width="0.0687%" height="15" fill="rgb(231,145,46)" fg:x="40460" fg:w="43"/><text x="64.8661%" y="95.50"></text></g><g><title>rust-obj-terminal-viewer`rust_obj_terminal_viewer::renderer::pipeline::rasterization::get_y_values_from_edge (9,243 samples, 14.76%)</title><rect x="51.2760%" y="133" width="14.7614%" height="15" fill="rgb(251,118,11)" fg:x="32107" fg:w="9243"/><text x="51.5260%" y="143.50">rust-obj-terminal-viewe..</text></g><g><title>ucrtbase`ceilf (847 samples, 1.35%)</title><rect x="64.6847%" y="117" width="1.3527%" height="15" fill="rgb(217,147,25)" fg:x="40503" fg:w="847"/><text x="64.9347%" y="127.50"></text></g><g><title>rust-obj-terminal-viewer`std::alloc::__default_lib_allocator::__rdl_alloc (372 samples, 0.59%)</title><rect x="66.0374%" y="133" width="0.5941%" height="15" fill="rgb(247,81,37)" fg:x="41350" fg:w="372"/><text x="66.2874%" y="143.50"></text></g><g><title>rust-obj-terminal-viewer`std::alloc::__default_lib_allocator::__rdl_dealloc (85 samples, 0.14%)</title><rect x="66.6315%" y="133" width="0.1357%" height="15" fill="rgb(209,12,38)" fg:x="41722" fg:w="85"/><text x="66.8815%" y="143.50"></text></g><g><title>rust-obj-terminal-viewer`rust_obj_terminal_viewer::renderer::pipeline::rasterization::render_triangle (33,392 samples, 53.33%)</title><rect x="14.6193%" y="149" width="53.3282%" height="15" fill="rgb(227,1,9)" fg:x="9154" fg:w="33392"/><text x="14.8693%" y="159.50">rust-obj-terminal-viewer`rust_obj_terminal_viewer::renderer::pipeline::rasterization::re..</text></g><g><title>ucrtbase`ceilf (739 samples, 1.18%)</title><rect x="66.7673%" y="133" width="1.1802%" height="15" fill="rgb(248,47,43)" fg:x="41807" fg:w="739"/><text x="67.0173%" y="143.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (494 samples, 0.79%)</title><rect x="76.9931%" y="117" width="0.7889%" height="15" fill="rgb(221,10,30)" fg:x="48210" fg:w="494"/><text x="77.2431%" y="127.50"></text></g><g><title>ntdll`RtlFreeHeap (44 samples, 0.07%)</title><rect x="77.7118%" y="101" width="0.0703%" height="15" fill="rgb(210,229,1)" fg:x="48660" fg:w="44"/><text x="77.9618%" y="111.50"></text></g><g><title>ntdll`RtlFreeHeap (1,950 samples, 3.11%)</title><rect x="76.6242%" y="133" width="3.1142%" height="15" fill="rgb(222,148,37)" fg:x="47979" fg:w="1950"/><text x="76.8742%" y="143.50">ntd..</text></g><g><title>ntdll`RtlMoveMemory (1,225 samples, 1.96%)</title><rect x="77.7820%" y="117" width="1.9564%" height="15" fill="rgb(234,67,33)" fg:x="48704" fg:w="1225"/><text x="78.0320%" y="127.50">n..</text></g><g><title>ntdll`RtlAllocateHeap (325 samples, 0.52%)</title><rect x="86.7015%" y="69" width="0.5190%" height="15" fill="rgb(247,98,35)" fg:x="54289" fg:w="325"/><text x="86.9515%" y="79.50"></text></g><g><title>ntdll`RtlAllocateHeap (4,552 samples, 7.27%)</title><rect x="81.0336%" y="101" width="7.2697%" height="15" fill="rgb(247,138,52)" fg:x="50740" fg:w="4552"/><text x="81.2836%" y="111.50">ntdll`RtlA..</text></g><g><title>ntdll`RtlAllocateHeap (3,507 samples, 5.60%)</title><rect x="82.7025%" y="85" width="5.6008%" height="15" fill="rgb(213,79,30)" fg:x="51785" fg:w="3507"/><text x="82.9525%" y="95.50">ntdll`R..</text></g><g><title>ntdll`RtlUnhandledExceptionFilter (678 samples, 1.08%)</title><rect x="87.2205%" y="69" width="1.0828%" height="15" fill="rgb(246,177,23)" fg:x="54614" fg:w="678"/><text x="87.4705%" y="79.50"></text></g><g><title>rust-obj-terminal-viewer`_rust_alloc (8 samples, 0.01%)</title><rect x="88.3033%" y="101" width="0.0128%" height="15" fill="rgb(230,62,27)" fg:x="55292" fg:w="8"/><text x="88.5533%" y="111.50"></text></g><g><title>rust-obj-terminal-viewer`alloc::raw_vec::RawVec&lt;rust_obj_terminal_viewer::general::positions_3d::Point,alloc::alloc::Global&gt;::reserve_for_push (5,593 samples, 8.93%)</title><rect x="79.7400%" y="133" width="8.9322%" height="15" fill="rgb(216,154,8)" fg:x="49930" fg:w="5593"/><text x="79.9900%" y="143.50">rust-obj-term..</text></g><g><title>rust-obj-terminal-viewer`alloc::raw_vec::finish_grow (5,034 samples, 8.04%)</title><rect x="80.6327%" y="117" width="8.0395%" height="15" fill="rgb(244,35,45)" fg:x="50489" fg:w="5034"/><text x="80.8827%" y="127.50">rust-obj-te..</text></g><g><title>rust-obj-terminal-viewer`std::alloc::__default_lib_allocator::__rdl_alloc (223 samples, 0.36%)</title><rect x="88.3161%" y="101" width="0.3561%" height="15" fill="rgb(251,115,12)" fg:x="55300" fg:w="223"/><text x="88.5661%" y="111.50"></text></g><g><title>rust-obj-terminal-viewer`rust_obj_terminal_viewer::renderer::pipeline::transformation::multiply_triangle_points_with_matrix (13,019 samples, 20.79%)</title><rect x="67.9475%" y="149" width="20.7918%" height="15" fill="rgb(240,54,50)" fg:x="42546" fg:w="13019"/><text x="68.1975%" y="159.50">rust-obj-terminal-viewer`rust_obj..</text></g><g><title>rust-obj-terminal-viewer`std::alloc::__default_lib_allocator::__rdl_dealloc (42 samples, 0.07%)</title><rect x="88.6722%" y="133" width="0.0671%" height="15" fill="rgb(233,84,52)" fg:x="55523" fg:w="42"/><text x="88.9222%" y="143.50"></text></g><g><title>rust-obj-terminal-viewer`rust_obj_terminal_viewer::renderer::pipeline::transformation::triangle_intersects_screen_space (786 samples, 1.26%)</title><rect x="88.7393%" y="149" width="1.2553%" height="15" fill="rgb(207,117,47)" fg:x="55565" fg:w="786"/><text x="88.9893%" y="159.50"></text></g><g><title>rust-obj-terminal-viewer`rust_obj_terminal_viewer::renderer::render::render_mesh (56,115 samples, 89.62%)</title><rect x="0.3785%" y="165" width="89.6177%" height="15" fill="rgb(249,43,39)" fg:x="237" fg:w="56115"/><text x="0.6285%" y="175.50">rust-obj-terminal-viewer`rust_obj_terminal_viewer::renderer::render::render_mesh</text></g><g><title>rust-obj-terminal-viewer`rust_obj_terminal_viewer::renderer::interface::Renderer::start_rendering&lt;ref_mut$ (56,198 samples, 89.75%)</title><rect x="0.2475%" y="181" width="89.7502%" height="15" fill="rgb(209,38,44)" fg:x="155" fg:w="56198"/><text x="0.4975%" y="191.50">rust-obj-terminal-viewer`rust_obj_terminal_viewer::renderer::interface::Renderer::start_rendering&lt;ref_mut$</text></g><g><title>KERNEL32`HeapFree (7 samples, 0.01%)</title><rect x="90.3842%" y="165" width="0.0112%" height="15" fill="rgb(236,212,23)" fg:x="56595" fg:w="7"/><text x="90.6342%" y="175.50"></text></g><g><title>ntdll`RtlAllocateHeap (7 samples, 0.01%)</title><rect x="90.4657%" y="133" width="0.0112%" height="15" fill="rgb(242,79,21)" fg:x="56646" fg:w="7"/><text x="90.7157%" y="143.50"></text></g><g><title>ntdll`RtlAllocateHeap (66 samples, 0.11%)</title><rect x="90.3954%" y="165" width="0.1054%" height="15" fill="rgb(211,96,35)" fg:x="56602" fg:w="66"/><text x="90.6454%" y="175.50"></text></g><g><title>ntdll`RtlAllocateHeap (49 samples, 0.08%)</title><rect x="90.4226%" y="149" width="0.0783%" height="15" fill="rgb(253,215,40)" fg:x="56619" fg:w="49"/><text x="90.6726%" y="159.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (15 samples, 0.02%)</title><rect x="90.4769%" y="133" width="0.0240%" height="15" fill="rgb(211,81,21)" fg:x="56653" fg:w="15"/><text x="90.7269%" y="143.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (208 samples, 0.33%)</title><rect x="90.6557%" y="149" width="0.3322%" height="15" fill="rgb(208,190,38)" fg:x="56765" fg:w="208"/><text x="90.9057%" y="159.50"></text></g><g><title>ntdll`RtlFreeHeap (18 samples, 0.03%)</title><rect x="90.9592%" y="133" width="0.0287%" height="15" fill="rgb(235,213,38)" fg:x="56955" fg:w="18"/><text x="91.2092%" y="143.50"></text></g><g><title>ntdll`RtlFreeHeap (793 samples, 1.27%)</title><rect x="90.5008%" y="165" width="1.2664%" height="15" fill="rgb(237,122,38)" fg:x="56668" fg:w="793"/><text x="90.7508%" y="175.50"></text></g><g><title>ntdll`RtlMoveMemory (488 samples, 0.78%)</title><rect x="90.9879%" y="149" width="0.7794%" height="15" fill="rgb(244,218,35)" fg:x="56973" fg:w="488"/><text x="91.2379%" y="159.50"></text></g><g><title>rust-obj-terminal-viewer`alloc::raw_vec::RawVec&lt;rust_obj_terminal_viewer::general::positions_3d::Point,alloc::alloc::Global&gt;::reserve_for_push (33 samples, 0.05%)</title><rect x="91.7689%" y="165" width="0.0527%" height="15" fill="rgb(240,68,47)" fg:x="57462" fg:w="33"/><text x="92.0189%" y="175.50"></text></g><g><title>rust-obj-terminal-viewer`alloc::raw_vec::finish_grow (33 samples, 0.05%)</title><rect x="91.7689%" y="149" width="0.0527%" height="15" fill="rgb(210,16,53)" fg:x="57462" fg:w="33"/><text x="92.0189%" y="159.50"></text></g><g><title>ntdll`RtlReAllocateHeap (33 samples, 0.05%)</title><rect x="91.7689%" y="133" width="0.0527%" height="15" fill="rgb(235,124,12)" fg:x="57462" fg:w="33"/><text x="92.0189%" y="143.50"></text></g><g><title>ntdll`RtlReAllocateHeap (33 samples, 0.05%)</title><rect x="91.7689%" y="117" width="0.0527%" height="15" fill="rgb(224,169,11)" fg:x="57462" fg:w="33"/><text x="92.0189%" y="127.50"></text></g><g><title>ntdll`RtlReAllocateHeap (33 samples, 0.05%)</title><rect x="91.7689%" y="101" width="0.0527%" height="15" fill="rgb(250,166,2)" fg:x="57462" fg:w="33"/><text x="92.0189%" y="111.50"></text></g><g><title>ntdll`RtlMoveMemory (27 samples, 0.04%)</title><rect x="91.7785%" y="85" width="0.0431%" height="15" fill="rgb(242,216,29)" fg:x="57468" fg:w="27"/><text x="92.0285%" y="95.50"></text></g><g><title>rust-obj-terminal-viewer`alloc::raw_vec::RawVec&lt;rust_obj_terminal_viewer::general::positions_3d::Triangle,alloc::alloc::Global&gt;::reserve_for_push (58 samples, 0.09%)</title><rect x="91.8216%" y="165" width="0.0926%" height="15" fill="rgb(230,116,27)" fg:x="57495" fg:w="58"/><text x="92.0716%" y="175.50"></text></g><g><title>rust-obj-terminal-viewer`alloc::raw_vec::finish_grow (58 samples, 0.09%)</title><rect x="91.8216%" y="149" width="0.0926%" height="15" fill="rgb(228,99,48)" fg:x="57495" fg:w="58"/><text x="92.0716%" y="159.50"></text></g><g><title>ntdll`RtlReAllocateHeap (58 samples, 0.09%)</title><rect x="91.8216%" y="133" width="0.0926%" height="15" fill="rgb(253,11,6)" fg:x="57495" fg:w="58"/><text x="92.0716%" y="143.50"></text></g><g><title>ntdll`RtlReAllocateHeap (58 samples, 0.09%)</title><rect x="91.8216%" y="117" width="0.0926%" height="15" fill="rgb(247,143,39)" fg:x="57495" fg:w="58"/><text x="92.0716%" y="127.50"></text></g><g><title>ntdll`RtlReAllocateHeap (58 samples, 0.09%)</title><rect x="91.8216%" y="101" width="0.0926%" height="15" fill="rgb(236,97,10)" fg:x="57495" fg:w="58"/><text x="92.0716%" y="111.50"></text></g><g><title>ntdll`RtlMoveMemory (52 samples, 0.08%)</title><rect x="91.8312%" y="85" width="0.0830%" height="15" fill="rgb(233,208,19)" fg:x="57501" fg:w="52"/><text x="92.0812%" y="95.50"></text></g><g><title>ntdll`RtlAllocateHeap (81 samples, 0.13%)</title><rect x="91.9877%" y="149" width="0.1294%" height="15" fill="rgb(216,164,2)" fg:x="57599" fg:w="81"/><text x="92.2377%" y="159.50"></text></g><g><title>ntdll`RtlAllocateHeap (62 samples, 0.10%)</title><rect x="92.0180%" y="133" width="0.0990%" height="15" fill="rgb(220,129,5)" fg:x="57618" fg:w="62"/><text x="92.2680%" y="143.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (18 samples, 0.03%)</title><rect x="92.0883%" y="117" width="0.0287%" height="15" fill="rgb(242,17,10)" fg:x="57662" fg:w="18"/><text x="92.3383%" y="127.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (61 samples, 0.10%)</title><rect x="92.2879%" y="117" width="0.0974%" height="15" fill="rgb(242,107,0)" fg:x="57787" fg:w="61"/><text x="92.5379%" y="127.50"></text></g><g><title>ntdll`RtlFreeHeap (223 samples, 0.36%)</title><rect x="92.2592%" y="133" width="0.3561%" height="15" fill="rgb(251,28,31)" fg:x="57769" fg:w="223"/><text x="92.5092%" y="143.50"></text></g><g><title>ntdll`RtlMoveMemory (144 samples, 0.23%)</title><rect x="92.3853%" y="117" width="0.2300%" height="15" fill="rgb(233,223,10)" fg:x="57848" fg:w="144"/><text x="92.6353%" y="127.50"></text></g><g><title>ntdll`RtlAllocateHeap (19 samples, 0.03%)</title><rect x="93.3835%" y="85" width="0.0303%" height="15" fill="rgb(215,21,27)" fg:x="58473" fg:w="19"/><text x="93.6335%" y="95.50"></text></g><g><title>ntdll`RtlAllocateHeap (361 samples, 0.58%)</title><rect x="92.9267%" y="117" width="0.5765%" height="15" fill="rgb(232,23,21)" fg:x="58187" fg:w="361"/><text x="93.1767%" y="127.50"></text></g><g><title>ntdll`RtlAllocateHeap (279 samples, 0.45%)</title><rect x="93.0577%" y="101" width="0.4456%" height="15" fill="rgb(244,5,23)" fg:x="58269" fg:w="279"/><text x="93.3077%" y="111.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (56 samples, 0.09%)</title><rect x="93.4138%" y="85" width="0.0894%" height="15" fill="rgb(226,81,46)" fg:x="58492" fg:w="56"/><text x="93.6638%" y="95.50"></text></g><g><title>rust-obj-terminal-viewer`core::str::iter::impl$60::next (123 samples, 0.20%)</title><rect x="93.5033%" y="117" width="0.1964%" height="15" fill="rgb(247,70,30)" fg:x="58548" fg:w="123"/><text x="93.7533%" y="127.50"></text></g><g><title>rust-obj-terminal-viewer`alloc::vec::spec_from_iter::impl$0::from_iter&lt;str,core::str::iter::Split (691 samples, 1.10%)</title><rect x="92.6185%" y="133" width="1.1036%" height="15" fill="rgb(212,68,19)" fg:x="57994" fg:w="691"/><text x="92.8685%" y="143.50"></text></g><g><title>rust-obj-terminal-viewer`std::alloc::__default_lib_allocator::__rdl_alloc (14 samples, 0.02%)</title><rect x="93.6997%" y="117" width="0.0224%" height="15" fill="rgb(240,187,13)" fg:x="58671" fg:w="14"/><text x="93.9497%" y="127.50"></text></g><g><title>rust-obj-terminal-viewer`core::num::impl$31::from_str (101 samples, 0.16%)</title><rect x="93.7221%" y="133" width="0.1613%" height="15" fill="rgb(223,113,26)" fg:x="58685" fg:w="101"/><text x="93.9721%" y="143.50"></text></g><g><title>rust-obj-terminal-viewer`rust_obj_terminal_viewer::renderer::obj_parser::parse_face_element_vertext_string (1,111 samples, 1.77%)</title><rect x="92.1170%" y="149" width="1.7743%" height="15" fill="rgb(206,192,2)" fg:x="57680" fg:w="1111"/><text x="92.3670%" y="159.50">r..</text></g><g><title>rust-obj-terminal-viewer`alloc::vec::spec_from_iter::impl$0::from_iter&lt;array$&lt;enum2$&lt;core::option::Option&lt;usize&gt; &gt;,3&gt;,core::iter::adapters::map::Map&lt;core::slice::iter::Iter (1,241 samples, 1.98%)</title><rect x="91.9142%" y="165" width="1.9819%" height="15" fill="rgb(241,108,4)" fg:x="57553" fg:w="1241"/><text x="92.1642%" y="175.50">r..</text></g><g><title>ntdll`RtlAllocateHeap (16 samples, 0.03%)</title><rect x="94.2347%" y="117" width="0.0256%" height="15" fill="rgb(247,173,49)" fg:x="59006" fg:w="16"/><text x="94.4847%" y="127.50"></text></g><g><title>ntdll`RtlAllocateHeap (230 samples, 0.37%)</title><rect x="93.9744%" y="149" width="0.3673%" height="15" fill="rgb(224,114,35)" fg:x="58843" fg:w="230"/><text x="94.2244%" y="159.50"></text></g><g><title>ntdll`RtlAllocateHeap (182 samples, 0.29%)</title><rect x="94.0510%" y="133" width="0.2907%" height="15" fill="rgb(245,159,27)" fg:x="58891" fg:w="182"/><text x="94.3010%" y="143.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (51 samples, 0.08%)</title><rect x="94.2603%" y="117" width="0.0814%" height="15" fill="rgb(245,172,44)" fg:x="59022" fg:w="51"/><text x="94.5103%" y="127.50"></text></g><g><title>rust-obj-terminal-viewer`core::num::dec2flt::number::Number::try_fast_path (183 samples, 0.29%)</title><rect x="94.6723%" y="133" width="0.2923%" height="15" fill="rgb(236,23,11)" fg:x="59280" fg:w="183"/><text x="94.9223%" y="143.50"></text></g><g><title>rust-obj-terminal-viewer`core::num::dec2flt::float::impl$0::pow10_fast_path (18 samples, 0.03%)</title><rect x="94.9358%" y="117" width="0.0287%" height="15" fill="rgb(205,117,38)" fg:x="59445" fg:w="18"/><text x="95.1858%" y="127.50"></text></g><g><title>rust-obj-terminal-viewer`core::num::dec2flt::dec2flt (686 samples, 1.10%)</title><rect x="94.3417%" y="149" width="1.0956%" height="15" fill="rgb(237,72,25)" fg:x="59073" fg:w="686"/><text x="94.5917%" y="159.50"></text></g><g><title>rust-obj-terminal-viewer`core::num::dec2flt::parse::parse_number (296 samples, 0.47%)</title><rect x="94.9645%" y="133" width="0.4727%" height="15" fill="rgb(244,70,9)" fg:x="59463" fg:w="296"/><text x="95.2145%" y="143.50"></text></g><g><title>rust-obj-terminal-viewer`alloc::vec::spec_from_iter::impl$0::from_iter&lt;f32,core::iter::adapters::filter_map::FilterMap&lt;core::slice::iter::Iter (986 samples, 1.57%)</title><rect x="93.8961%" y="165" width="1.5747%" height="15" fill="rgb(217,125,39)" fg:x="58794" fg:w="986"/><text x="94.1461%" y="175.50"></text></g><g><title>rust-obj-terminal-viewer`std::alloc::__default_lib_allocator::__rdl_alloc (21 samples, 0.03%)</title><rect x="95.4373%" y="149" width="0.0335%" height="15" fill="rgb(235,36,10)" fg:x="59759" fg:w="21"/><text x="95.6873%" y="159.50"></text></g><g><title>ntdll`RtlAllocateHeap (102 samples, 0.16%)</title><rect x="95.5219%" y="149" width="0.1629%" height="15" fill="rgb(251,123,47)" fg:x="59812" fg:w="102"/><text x="95.7719%" y="159.50"></text></g><g><title>ntdll`RtlAllocateHeap (76 samples, 0.12%)</title><rect x="95.5634%" y="133" width="0.1214%" height="15" fill="rgb(221,13,13)" fg:x="59838" fg:w="76"/><text x="95.8134%" y="143.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (22 samples, 0.04%)</title><rect x="95.6497%" y="117" width="0.0351%" height="15" fill="rgb(238,131,9)" fg:x="59892" fg:w="22"/><text x="95.8997%" y="127.50"></text></g><g><title>rust-obj-terminal-viewer`alloc::vec::spec_from_iter::impl$0::from_iter&lt;ref$&lt;rust_obj_terminal_viewer::general::positions_3d::Point&gt;,core::iter::adapters::map::Map&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;array$&lt;enum2$&lt;core::option::Option (137 samples, 0.22%)</title><rect x="95.4708%" y="165" width="0.2188%" height="15" fill="rgb(211,50,8)" fg:x="59780" fg:w="137"/><text x="95.7208%" y="175.50"></text></g><g><title>VCRUNTIME140`memcmp (38 samples, 0.06%)</title><rect x="96.3635%" y="149" width="0.0607%" height="15" fill="rgb(245,182,24)" fg:x="60339" fg:w="38"/><text x="96.6135%" y="159.50"></text></g><g><title>ntdll`RtlAllocateHeap (35 samples, 0.06%)</title><rect x="96.8794%" y="117" width="0.0559%" height="15" fill="rgb(242,14,37)" fg:x="60662" fg:w="35"/><text x="97.1294%" y="127.50"></text></g><g><title>ntdll`RtlAllocateHeap (385 samples, 0.61%)</title><rect x="96.4242%" y="149" width="0.6149%" height="15" fill="rgb(246,228,12)" fg:x="60377" fg:w="385"/><text x="96.6742%" y="159.50"></text></g><g><title>ntdll`RtlAllocateHeap (288 samples, 0.46%)</title><rect x="96.5791%" y="133" width="0.4599%" height="15" fill="rgb(213,55,15)" fg:x="60474" fg:w="288"/><text x="96.8291%" y="143.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (65 samples, 0.10%)</title><rect x="96.9353%" y="117" width="0.1038%" height="15" fill="rgb(209,9,3)" fg:x="60697" fg:w="65"/><text x="97.1853%" y="127.50"></text></g><g><title>ntdll`RtlAllocateHeap (118 samples, 0.19%)</title><rect x="97.1828%" y="69" width="0.1885%" height="15" fill="rgb(230,59,30)" fg:x="60852" fg:w="118"/><text x="97.4328%" y="79.50"></text></g><g><title>ntdll`RtlAllocateHeap (90 samples, 0.14%)</title><rect x="97.2275%" y="53" width="0.1437%" height="15" fill="rgb(209,121,21)" fg:x="60880" fg:w="90"/><text x="97.4775%" y="63.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (28 samples, 0.04%)</title><rect x="97.3266%" y="37" width="0.0447%" height="15" fill="rgb(220,109,13)" fg:x="60942" fg:w="28"/><text x="97.5766%" y="47.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (14 samples, 0.02%)</title><rect x="97.3777%" y="53" width="0.0224%" height="15" fill="rgb(232,18,1)" fg:x="60974" fg:w="14"/><text x="97.6277%" y="63.50"></text></g><g><title>ntdll`RtlFreeHeap (74 samples, 0.12%)</title><rect x="97.3713%" y="69" width="0.1182%" height="15" fill="rgb(215,41,42)" fg:x="60970" fg:w="74"/><text x="97.6213%" y="79.50"></text></g><g><title>ntdll`RtlMoveMemory (56 samples, 0.09%)</title><rect x="97.4000%" y="53" width="0.0894%" height="15" fill="rgb(224,123,36)" fg:x="60988" fg:w="56"/><text x="97.6500%" y="63.50"></text></g><g><title>ntdll`RtlReAllocateHeap (236 samples, 0.38%)</title><rect x="97.1269%" y="85" width="0.3769%" height="15" fill="rgb(240,125,3)" fg:x="60817" fg:w="236"/><text x="97.3769%" y="95.50"></text></g><g><title>ntdll`RtlMoveMemory (9 samples, 0.01%)</title><rect x="97.4895%" y="69" width="0.0144%" height="15" fill="rgb(205,98,50)" fg:x="61044" fg:w="9"/><text x="97.7395%" y="79.50"></text></g><g><title>ntdll`RtlReAllocateHeap (267 samples, 0.43%)</title><rect x="97.0790%" y="117" width="0.4264%" height="15" fill="rgb(205,185,37)" fg:x="60787" fg:w="267"/><text x="97.3290%" y="127.50"></text></g><g><title>ntdll`RtlReAllocateHeap (259 samples, 0.41%)</title><rect x="97.0918%" y="101" width="0.4136%" height="15" fill="rgb(238,207,15)" fg:x="60795" fg:w="259"/><text x="97.3418%" y="111.50"></text></g><g><title>rust-obj-terminal-viewer`alloc::raw_vec::impl$1::reserve::do_reserve_and_handle (301 samples, 0.48%)</title><rect x="97.0407%" y="149" width="0.4807%" height="15" fill="rgb(213,199,42)" fg:x="60763" fg:w="301"/><text x="97.2907%" y="159.50"></text></g><g><title>rust-obj-terminal-viewer`alloc::raw_vec::finish_grow (286 samples, 0.46%)</title><rect x="97.0646%" y="133" width="0.4568%" height="15" fill="rgb(235,201,11)" fg:x="60778" fg:w="286"/><text x="97.3146%" y="143.50"></text></g><g><title>rust-obj-terminal-viewer`std::alloc::__default_lib_allocator::__rdl_realloc (10 samples, 0.02%)</title><rect x="97.5054%" y="117" width="0.0160%" height="15" fill="rgb(207,46,11)" fg:x="61054" fg:w="10"/><text x="97.7554%" y="127.50"></text></g><g><title>rust-obj-terminal-viewer`core::slice::memchr::memchr_aligned (157 samples, 0.25%)</title><rect x="97.5214%" y="149" width="0.2507%" height="15" fill="rgb(241,35,35)" fg:x="61064" fg:w="157"/><text x="97.7714%" y="159.50"></text></g><g><title>VCRUNTIME140`memcmp (20 samples, 0.03%)</title><rect x="97.8408%" y="133" width="0.0319%" height="15" fill="rgb(243,32,47)" fg:x="61264" fg:w="20"/><text x="98.0908%" y="143.50"></text></g><g><title>rust-obj-terminal-viewer`core::slice::memchr::memchr_aligned (38 samples, 0.06%)</title><rect x="97.8727%" y="133" width="0.0607%" height="15" fill="rgb(247,202,23)" fg:x="61284" fg:w="38"/><text x="98.1227%" y="143.50"></text></g><g><title>rust-obj-terminal-viewer`core::str::iter::impl$60::next (102 samples, 0.16%)</title><rect x="97.7721%" y="149" width="0.1629%" height="15" fill="rgb(219,102,11)" fg:x="61221" fg:w="102"/><text x="98.0221%" y="159.50"></text></g><g><title>rust-obj-terminal-viewer`alloc::vec::spec_from_iter::impl$0::from_iter&lt;str,core::iter::adapters::filter::Filter&lt;core::str::iter::Split (1,417 samples, 2.26%)</title><rect x="95.6896%" y="165" width="2.2630%" height="15" fill="rgb(243,110,44)" fg:x="59917" fg:w="1417"/><text x="95.9396%" y="175.50">r..</text></g><g><title>rust-obj-terminal-viewer`std::alloc::__default_lib_allocator::__rdl_alloc (9 samples, 0.01%)</title><rect x="97.9382%" y="149" width="0.0144%" height="15" fill="rgb(222,74,54)" fg:x="61325" fg:w="9"/><text x="98.1882%" y="159.50"></text></g><g><title>rust-obj-terminal-viewer`rust_obj_terminal_viewer::general::positions_3d::Triangle::get_normal_2 (39 samples, 0.06%)</title><rect x="97.9526%" y="165" width="0.0623%" height="15" fill="rgb(216,99,12)" fg:x="61334" fg:w="39"/><text x="98.2026%" y="175.50"></text></g><g><title>rust-obj-terminal-viewer`std::alloc::__default_lib_allocator::__rdl_alloc (7 samples, 0.01%)</title><rect x="98.0149%" y="165" width="0.0112%" height="15" fill="rgb(226,22,26)" fg:x="61373" fg:w="7"/><text x="98.2649%" y="175.50"></text></g><g><title>rust-obj-terminal-viewer`std::alloc::__default_lib_allocator::__rdl_dealloc (12 samples, 0.02%)</title><rect x="98.0261%" y="165" width="0.0192%" height="15" fill="rgb(217,163,10)" fg:x="61380" fg:w="12"/><text x="98.2761%" y="175.50"></text></g><g><title>VCRUNTIME140`memcpy (29 samples, 0.05%)</title><rect x="98.3247%" y="133" width="0.0463%" height="15" fill="rgb(213,25,53)" fg:x="61567" fg:w="29"/><text x="98.5747%" y="143.50"></text></g><g><title>ntdll`RtlAllocateHeap (19 samples, 0.03%)</title><rect x="98.9156%" y="69" width="0.0303%" height="15" fill="rgb(252,105,26)" fg:x="61937" fg:w="19"/><text x="99.1656%" y="79.50"></text></g><g><title>ntdll`RtlAllocateHeap (318 samples, 0.51%)</title><rect x="98.5307%" y="101" width="0.5079%" height="15" fill="rgb(220,39,43)" fg:x="61696" fg:w="318"/><text x="98.7807%" y="111.50"></text></g><g><title>ntdll`RtlAllocateHeap (242 samples, 0.39%)</title><rect x="98.6521%" y="85" width="0.3865%" height="15" fill="rgb(229,68,48)" fg:x="61772" fg:w="242"/><text x="98.9021%" y="95.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (58 samples, 0.09%)</title><rect x="98.9460%" y="69" width="0.0926%" height="15" fill="rgb(252,8,32)" fg:x="61956" fg:w="58"/><text x="99.1960%" y="79.50"></text></g><g><title>rust-obj-terminal-viewer`std::alloc::__default_lib_allocator::__rdl_alloc (35 samples, 0.06%)</title><rect x="99.0450%" y="101" width="0.0559%" height="15" fill="rgb(223,20,43)" fg:x="62018" fg:w="35"/><text x="99.2950%" y="111.50"></text></g><g><title>rust-obj-terminal-viewer`alloc::raw_vec::impl$1::reserve::do_reserve_and_handle (458 samples, 0.73%)</title><rect x="98.3710%" y="133" width="0.7314%" height="15" fill="rgb(229,81,49)" fg:x="61596" fg:w="458"/><text x="98.6210%" y="143.50"></text></g><g><title>rust-obj-terminal-viewer`alloc::raw_vec::finish_grow (404 samples, 0.65%)</title><rect x="98.4573%" y="117" width="0.6452%" height="15" fill="rgb(236,28,36)" fg:x="61650" fg:w="404"/><text x="98.7073%" y="127.50"></text></g><g><title>rust-obj-terminal-viewer`core::slice::memchr::memchr_aligned (242 samples, 0.39%)</title><rect x="99.1025%" y="133" width="0.3865%" height="15" fill="rgb(249,185,26)" fg:x="62054" fg:w="242"/><text x="99.3525%" y="143.50"></text></g><g><title>rust-obj-terminal-viewer`core::str::converts::from_utf8 (89 samples, 0.14%)</title><rect x="99.4889%" y="133" width="0.1421%" height="15" fill="rgb(249,174,33)" fg:x="62296" fg:w="89"/><text x="99.7389%" y="143.50"></text></g><g><title>rust-obj-terminal-viewer`std::io::impl$0::drop (12 samples, 0.02%)</title><rect x="99.6311%" y="133" width="0.0192%" height="15" fill="rgb(233,201,37)" fg:x="62385" fg:w="12"/><text x="99.8811%" y="143.50"></text></g><g><title>rust-obj-terminal-viewer`rust_obj_terminal_viewer::renderer::obj_parser::ObjParser::parse_file (6,251 samples, 9.98%)</title><rect x="89.9978%" y="181" width="9.9831%" height="15" fill="rgb(221,78,26)" fg:x="56353" fg:w="6251"/><text x="90.2478%" y="191.50">rust-obj-termi..</text></g><g><title>rust-obj-terminal-viewer`std::io::impl$26::next&lt;std::io::buffered::bufreader::BufReader (1,212 samples, 1.94%)</title><rect x="98.0452%" y="165" width="1.9356%" height="15" fill="rgb(250,127,30)" fg:x="61392" fg:w="1212"/><text x="98.2952%" y="175.50">r..</text></g><g><title>rust-obj-terminal-viewer`std::io::append_to_string&lt;std::io::BufRead::read_line::closure_env$0&lt;std::io::buffered::bufreader::BufReader (1,148 samples, 1.83%)</title><rect x="98.1474%" y="149" width="1.8334%" height="15" fill="rgb(230,49,44)" fg:x="61456" fg:w="1148"/><text x="98.3974%" y="159.50">r..</text></g><g><title>rust-obj-terminal-viewer`std::sys::windows::handle::Handle::read_buf (207 samples, 0.33%)</title><rect x="99.6502%" y="133" width="0.3306%" height="15" fill="rgb(229,67,23)" fg:x="62397" fg:w="207"/><text x="99.9002%" y="143.50"></text></g><g><title>rust-obj-terminal-viewer`std::sys::windows::handle::Handle::synchronous_read (207 samples, 0.33%)</title><rect x="99.6502%" y="117" width="0.3306%" height="15" fill="rgb(249,83,47)" fg:x="62397" fg:w="207"/><text x="99.9002%" y="127.50"></text></g><g><title>ntdll`NtReadFile (207 samples, 0.33%)</title><rect x="99.6502%" y="101" width="0.3306%" height="15" fill="rgb(215,43,3)" fg:x="62397" fg:w="207"/><text x="99.9002%" y="111.50"></text></g><g><title>rust-obj-terminal-viewer`main (62,554 samples, 99.90%)</title><rect x="0.0862%" y="261" width="99.9010%" height="15" fill="rgb(238,154,13)" fg:x="54" fg:w="62554"/><text x="0.3362%" y="271.50">rust-obj-terminal-viewer`main</text></g><g><title>rust-obj-terminal-viewer`std::rt::lang_start_internal (62,554 samples, 99.90%)</title><rect x="0.0862%" y="245" width="99.9010%" height="15" fill="rgb(219,56,2)" fg:x="54" fg:w="62554"/><text x="0.3362%" y="255.50">rust-obj-terminal-viewer`std::rt::lang_start_internal</text></g><g><title>rust-obj-terminal-viewer`core::ops::function::FnOnce::call_once&lt;std::rt::lang_start::closure_env$0&lt;tuple$&lt;&gt; &gt;,tuple$ (62,554 samples, 99.90%)</title><rect x="0.0862%" y="229" width="99.9010%" height="15" fill="rgb(233,0,4)" fg:x="54" fg:w="62554"/><text x="0.3362%" y="239.50">rust-obj-terminal-viewer`core::ops::function::FnOnce::call_once&lt;std::rt::lang_start::closure_env$0&lt;tuple$&lt;&gt; &gt;,tuple$</text></g><g><title>rust-obj-terminal-viewer`std::sys_common::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$ (62,554 samples, 99.90%)</title><rect x="0.0862%" y="213" width="99.9010%" height="15" fill="rgb(235,30,7)" fg:x="54" fg:w="62554"/><text x="0.3362%" y="223.50">rust-obj-terminal-viewer`std::sys_common::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$</text></g><g><title>rust-obj-terminal-viewer`rust_obj_terminal_viewer::main (62,554 samples, 99.90%)</title><rect x="0.0862%" y="197" width="99.9010%" height="15" fill="rgb(250,79,13)" fg:x="54" fg:w="62554"/><text x="0.3362%" y="207.50">rust-obj-terminal-viewer`rust_obj_terminal_viewer::main</text></g><g><title>ucrtbase`exit (7 samples, 0.01%)</title><rect x="99.9872%" y="261" width="0.0112%" height="15" fill="rgb(211,146,34)" fg:x="62608" fg:w="7"/><text x="100.2372%" y="271.50"></text></g><g><title>ucrtbase`exit (7 samples, 0.01%)</title><rect x="99.9872%" y="245" width="0.0112%" height="15" fill="rgb(228,22,38)" fg:x="62608" fg:w="7"/><text x="100.2372%" y="255.50"></text></g><g><title>all (62,616 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(235,168,5)" fg:x="0" fg:w="62616"/><text x="0.2500%" y="335.50"></text></g><g><title>ntdll`RtlUserThreadStart (62,570 samples, 99.93%)</title><rect x="0.0735%" y="309" width="99.9265%" height="15" fill="rgb(221,155,16)" fg:x="46" fg:w="62570"/><text x="0.3235%" y="319.50">ntdll`RtlUserThreadStart</text></g><g><title>KERNEL32`BaseThreadInitThunk (62,568 samples, 99.92%)</title><rect x="0.0767%" y="293" width="99.9233%" height="15" fill="rgb(215,215,53)" fg:x="48" fg:w="62568"/><text x="0.3267%" y="303.50">KERNEL32`BaseThreadInitThunk</text></g><g><title>rust-obj-terminal-viewer`__scrt_common_main_seh (62,562 samples, 99.91%)</title><rect x="0.0862%" y="277" width="99.9138%" height="15" fill="rgb(223,4,10)" fg:x="54" fg:w="62562"/><text x="0.3362%" y="287.50">rust-obj-terminal-viewer`__scrt_common_main_seh</text></g></svg></svg>