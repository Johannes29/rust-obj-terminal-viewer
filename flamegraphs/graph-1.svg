<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="357.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="357.00"> </text><svg id="frames" x="10" width="1180" total_samples="61770"><g><title>ntdll`RtlActivateActivationContextUnsafeFast (8 samples, 0.01%)</title><rect x="0.0194%" y="197" width="0.0130%" height="15" fill="rgb(227,0,7)" fg:x="12" fg:w="8"/><text x="0.2694%" y="207.50"></text></g><g><title>user32`UserClientDllInitialize (7 samples, 0.01%)</title><rect x="0.0210%" y="181" width="0.0113%" height="15" fill="rgb(217,0,24)" fg:x="13" fg:w="7"/><text x="0.2710%" y="191.50"></text></g><g><title>ntdll`RtlEnumerateEntryHashTable (10 samples, 0.02%)</title><rect x="0.0194%" y="245" width="0.0162%" height="15" fill="rgb(221,193,54)" fg:x="12" fg:w="10"/><text x="0.2694%" y="255.50"></text></g><g><title>ntdll`RtlEnumerateEntryHashTable (10 samples, 0.02%)</title><rect x="0.0194%" y="229" width="0.0162%" height="15" fill="rgb(248,212,6)" fg:x="12" fg:w="10"/><text x="0.2694%" y="239.50"></text></g><g><title>ntdll`RtlEnumerateEntryHashTable (10 samples, 0.02%)</title><rect x="0.0194%" y="213" width="0.0162%" height="15" fill="rgb(208,68,35)" fg:x="12" fg:w="10"/><text x="0.2694%" y="223.50"></text></g><g><title>ntdll`RtlImpersonateSelfEx (10 samples, 0.02%)</title><rect x="0.0437%" y="245" width="0.0162%" height="15" fill="rgb(232,128,0)" fg:x="27" fg:w="10"/><text x="0.2937%" y="255.50"></text></g><g><title>ntdll`LdrInitializeThunk (39 samples, 0.06%)</title><rect x="0.0000%" y="309" width="0.0631%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="39"/><text x="0.2500%" y="319.50"></text></g><g><title>ntdll`LdrInitializeThunk (39 samples, 0.06%)</title><rect x="0.0000%" y="293" width="0.0631%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="39"/><text x="0.2500%" y="303.50"></text></g><g><title>ntdll`EtwLogTraceEvent (39 samples, 0.06%)</title><rect x="0.0000%" y="277" width="0.0631%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="39"/><text x="0.2500%" y="287.50"></text></g><g><title>ntdll`EtwLogTraceEvent (39 samples, 0.06%)</title><rect x="0.0000%" y="261" width="0.0631%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="39"/><text x="0.2500%" y="271.50"></text></g><g><title>rust-obj-terminal-viewer`alloc::vec::impl$14::clone (49 samples, 0.08%)</title><rect x="0.1554%" y="165" width="0.0793%" height="15" fill="rgb(250,228,42)" fg:x="96" fg:w="49"/><text x="0.4054%" y="175.50"></text></g><g><title>rust-obj-terminal-viewer`rust_obj_terminal_viewer::renderer::interface::Renderer::set_mesh (97 samples, 0.16%)</title><rect x="0.0842%" y="181" width="0.1570%" height="15" fill="rgb(240,193,28)" fg:x="52" fg:w="97"/><text x="0.3342%" y="191.50"></text></g><g><title>rust-obj-terminal-viewer`rust_obj_terminal_viewer::renderer::pipeline::terminal_output::draw_char_buffer (9 samples, 0.01%)</title><rect x="0.2704%" y="165" width="0.0146%" height="15" fill="rgb(216,20,37)" fg:x="167" fg:w="9"/><text x="0.5204%" y="175.50"></text></g><g><title>rust-obj-terminal-viewer`std::io::stdio::impl$11::flush (9 samples, 0.01%)</title><rect x="0.2704%" y="149" width="0.0146%" height="15" fill="rgb(206,188,39)" fg:x="167" fg:w="9"/><text x="0.5204%" y="159.50"></text></g><g><title>rust-obj-terminal-viewer`std::io::stdio::impl$12::flush (9 samples, 0.01%)</title><rect x="0.2704%" y="133" width="0.0146%" height="15" fill="rgb(217,207,13)" fg:x="167" fg:w="9"/><text x="0.5204%" y="143.50"></text></g><g><title>rust-obj-terminal-viewer`std::io::buffered::bufwriter::BufWriter::flush_buf (9 samples, 0.01%)</title><rect x="0.2704%" y="117" width="0.0146%" height="15" fill="rgb(231,73,38)" fg:x="167" fg:w="9"/><text x="0.5204%" y="127.50"></text></g><g><title>rust-obj-terminal-viewer`std::io::stdio::impl$1::write (9 samples, 0.01%)</title><rect x="0.2704%" y="101" width="0.0146%" height="15" fill="rgb(225,20,46)" fg:x="167" fg:w="9"/><text x="0.5204%" y="111.50"></text></g><g><title>rust-obj-terminal-viewer`std::sys::windows::stdio::write (9 samples, 0.01%)</title><rect x="0.2704%" y="85" width="0.0146%" height="15" fill="rgb(210,31,41)" fg:x="167" fg:w="9"/><text x="0.5204%" y="95.50"></text></g><g><title>rust-obj-terminal-viewer`core::array::impl$24::map (100 samples, 0.16%)</title><rect x="1.3874%" y="149" width="0.1619%" height="15" fill="rgb(221,200,47)" fg:x="857" fg:w="100"/><text x="1.6374%" y="159.50"></text></g><g><title>rust-obj-terminal-viewer`rust_obj_terminal_viewer::general::positions_3d::Triangle::add_point (3,318 samples, 5.37%)</title><rect x="1.5493%" y="149" width="5.3715%" height="15" fill="rgb(226,26,5)" fg:x="957" fg:w="3318"/><text x="1.7993%" y="159.50">rust-ob..</text></g><g><title>rust-obj-terminal-viewer`rust_obj_terminal_viewer::general::positions_3d::Triangle::multiply_with_point (5,221 samples, 8.45%)</title><rect x="6.9208%" y="149" width="8.4523%" height="15" fill="rgb(249,33,26)" fg:x="4275" fg:w="5221"/><text x="7.1708%" y="159.50">rust-obj-ter..</text></g><g><title>KERNEL32`HeapFree (20 samples, 0.03%)</title><rect x="22.4624%" y="133" width="0.0324%" height="15" fill="rgb(235,183,28)" fg:x="13875" fg:w="20"/><text x="22.7124%" y="143.50"></text></g><g><title>ntdll`RtlAllocateHeap (524 samples, 0.85%)</title><rect x="32.3134%" y="101" width="0.8483%" height="15" fill="rgb(221,5,38)" fg:x="19960" fg:w="524"/><text x="32.5634%" y="111.50"></text></g><g><title>ntdll`RtlAllocateHeap (7,748 samples, 12.54%)</title><rect x="22.4947%" y="133" width="12.5433%" height="15" fill="rgb(247,18,42)" fg:x="13895" fg:w="7748"/><text x="22.7447%" y="143.50">ntdll`RtlAllocateHe..</text></g><g><title>ntdll`RtlAllocateHeap (5,908 samples, 9.56%)</title><rect x="25.4735%" y="117" width="9.5645%" height="15" fill="rgb(241,131,45)" fg:x="15735" fg:w="5908"/><text x="25.7235%" y="127.50">ntdll`RtlAlloc..</text></g><g><title>ntdll`RtlUnhandledExceptionFilter (1,159 samples, 1.88%)</title><rect x="33.1617%" y="101" width="1.8763%" height="15" fill="rgb(249,31,29)" fg:x="20484" fg:w="1159"/><text x="33.4117%" y="111.50">n..</text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (1,177 samples, 1.91%)</title><rect x="36.0774%" y="117" width="1.9055%" height="15" fill="rgb(225,111,53)" fg:x="22285" fg:w="1177"/><text x="36.3274%" y="127.50">n..</text></g><g><title>ntdll`RtlFreeHeap (92 samples, 0.15%)</title><rect x="37.8339%" y="101" width="0.1489%" height="15" fill="rgb(238,160,17)" fg:x="23370" fg:w="92"/><text x="38.0839%" y="111.50"></text></g><g><title>ntdll`RtlFreeHeap (5,248 samples, 8.50%)</title><rect x="35.0380%" y="133" width="8.4960%" height="15" fill="rgb(214,148,48)" fg:x="21643" fg:w="5248"/><text x="35.2880%" y="143.50">ntdll`RtlFre..</text></g><g><title>ntdll`RtlMoveMemory (3,429 samples, 5.55%)</title><rect x="37.9828%" y="117" width="5.5512%" height="15" fill="rgb(232,36,49)" fg:x="23462" fg:w="3429"/><text x="38.2328%" y="127.50">ntdll`R..</text></g><g><title>rust-obj-terminal-viewer`_rust_alloc (15 samples, 0.02%)</title><rect x="43.5341%" y="133" width="0.0243%" height="15" fill="rgb(209,103,24)" fg:x="26891" fg:w="15"/><text x="43.7841%" y="143.50"></text></g><g><title>rust-obj-terminal-viewer`_rust_dealloc (12 samples, 0.02%)</title><rect x="43.5584%" y="133" width="0.0194%" height="15" fill="rgb(229,88,8)" fg:x="26906" fg:w="12"/><text x="43.8084%" y="143.50"></text></g><g><title>rust-obj-terminal-viewer`alloc::slice::merge_sort&lt;ref$&lt;rust_obj_terminal_viewer::general::positions_2d::Point&gt;,alloc::slice::impl$0::sort_by::closure_env$0&lt;ref$ (5,425 samples, 8.78%)</title><rect x="43.5778%" y="133" width="8.7826%" height="15" fill="rgb(213,181,19)" fg:x="26918" fg:w="5425"/><text x="43.8278%" y="143.50">rust-obj-ter..</text></g><g><title>ntdll`RtlAllocateHeap (58 samples, 0.09%)</title><rect x="62.1499%" y="53" width="0.0939%" height="15" fill="rgb(254,191,54)" fg:x="38390" fg:w="58"/><text x="62.3999%" y="63.50"></text></g><g><title>ntdll`RtlAllocateHeap (685 samples, 1.11%)</title><rect x="61.3583%" y="85" width="1.1090%" height="15" fill="rgb(241,83,37)" fg:x="37901" fg:w="685"/><text x="61.6083%" y="95.50"></text></g><g><title>ntdll`RtlAllocateHeap (556 samples, 0.90%)</title><rect x="61.5671%" y="69" width="0.9001%" height="15" fill="rgb(233,36,39)" fg:x="38030" fg:w="556"/><text x="61.8171%" y="79.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (138 samples, 0.22%)</title><rect x="62.2438%" y="53" width="0.2234%" height="15" fill="rgb(226,3,54)" fg:x="38448" fg:w="138"/><text x="62.4938%" y="63.50"></text></g><g><title>rust-obj-terminal-viewer`_rust_alloc (8 samples, 0.01%)</title><rect x="62.4672%" y="85" width="0.0130%" height="15" fill="rgb(245,192,40)" fg:x="38586" fg:w="8"/><text x="62.7172%" y="95.50"></text></g><g><title>rust-obj-terminal-viewer`alloc::raw_vec::RawVec&lt;usize,alloc::alloc::Global&gt;::reserve_for_push (860 samples, 1.39%)</title><rect x="61.1219%" y="117" width="1.3923%" height="15" fill="rgb(238,167,29)" fg:x="37755" fg:w="860"/><text x="61.3719%" y="127.50"></text></g><g><title>rust-obj-terminal-viewer`alloc::raw_vec::finish_grow (781 samples, 1.26%)</title><rect x="61.2498%" y="101" width="1.2644%" height="15" fill="rgb(232,182,51)" fg:x="37834" fg:w="781"/><text x="61.4998%" y="111.50"></text></g><g><title>rust-obj-terminal-viewer`std::alloc::__default_lib_allocator::__rdl_alloc (21 samples, 0.03%)</title><rect x="62.4802%" y="85" width="0.0340%" height="15" fill="rgb(231,60,39)" fg:x="38594" fg:w="21"/><text x="62.7302%" y="95.50"></text></g><g><title>rust-obj-terminal-viewer`rust_obj_terminal_viewer::renderer::pipeline::rasterization::get_y_values_from_edge (7,263 samples, 11.76%)</title><rect x="52.3604%" y="133" width="11.7581%" height="15" fill="rgb(208,69,12)" fg:x="32343" fg:w="7263"/><text x="52.6104%" y="143.50">rust-obj-terminal..</text></g><g><title>ucrtbase`ceilf (991 samples, 1.60%)</title><rect x="62.5142%" y="117" width="1.6043%" height="15" fill="rgb(235,93,37)" fg:x="38615" fg:w="991"/><text x="62.7642%" y="127.50"></text></g><g><title>rust-obj-terminal-viewer`std::alloc::__default_lib_allocator::__rdl_alloc (398 samples, 0.64%)</title><rect x="64.1185%" y="133" width="0.6443%" height="15" fill="rgb(213,116,39)" fg:x="39606" fg:w="398"/><text x="64.3685%" y="143.50"></text></g><g><title>rust-obj-terminal-viewer`std::alloc::__default_lib_allocator::__rdl_dealloc (78 samples, 0.13%)</title><rect x="64.7628%" y="133" width="0.1263%" height="15" fill="rgb(222,207,29)" fg:x="40004" fg:w="78"/><text x="65.0128%" y="143.50"></text></g><g><title>rust-obj-terminal-viewer`rust_obj_terminal_viewer::renderer::pipeline::rasterization::render_triangle (31,376 samples, 50.79%)</title><rect x="15.3732%" y="149" width="50.7949%" height="15" fill="rgb(206,96,30)" fg:x="9496" fg:w="31376"/><text x="15.6232%" y="159.50">rust-obj-terminal-viewer`rust_obj_terminal_viewer::renderer::pipeline::rasterization..</text></g><g><title>ucrtbase`ceilf (790 samples, 1.28%)</title><rect x="64.8891%" y="133" width="1.2789%" height="15" fill="rgb(218,138,4)" fg:x="40082" fg:w="790"/><text x="65.1391%" y="143.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (380 samples, 0.62%)</title><rect x="76.2085%" y="117" width="0.6152%" height="15" fill="rgb(250,191,14)" fg:x="47074" fg:w="380"/><text x="76.4585%" y="127.50"></text></g><g><title>ntdll`RtlFreeHeap (50 samples, 0.08%)</title><rect x="76.7428%" y="101" width="0.0809%" height="15" fill="rgb(239,60,40)" fg:x="47404" fg:w="50"/><text x="76.9928%" y="111.50"></text></g><g><title>ntdll`RtlFreeHeap (1,984 samples, 3.21%)</title><rect x="75.6581%" y="133" width="3.2119%" height="15" fill="rgb(206,27,48)" fg:x="46734" fg:w="1984"/><text x="75.9081%" y="143.50">ntd..</text></g><g><title>ntdll`RtlMoveMemory (1,264 samples, 2.05%)</title><rect x="76.8237%" y="117" width="2.0463%" height="15" fill="rgb(225,35,8)" fg:x="47454" fg:w="1264"/><text x="77.0737%" y="127.50">n..</text></g><g><title>ntdll`RtlAllocateHeap (312 samples, 0.51%)</title><rect x="86.1243%" y="69" width="0.5051%" height="15" fill="rgb(250,213,24)" fg:x="53199" fg:w="312"/><text x="86.3743%" y="79.50"></text></g><g><title>ntdll`RtlAllocateHeap (4,657 samples, 7.54%)</title><rect x="80.1862%" y="101" width="7.5393%" height="15" fill="rgb(247,123,22)" fg:x="49531" fg:w="4657"/><text x="80.4362%" y="111.50">ntdll`RtlA..</text></g><g><title>ntdll`RtlAllocateHeap (3,408 samples, 5.52%)</title><rect x="82.2082%" y="85" width="5.5172%" height="15" fill="rgb(231,138,38)" fg:x="50780" fg:w="3408"/><text x="82.4582%" y="95.50">ntdll`R..</text></g><g><title>ntdll`RtlUnhandledExceptionFilter (677 samples, 1.10%)</title><rect x="86.6294%" y="69" width="1.0960%" height="15" fill="rgb(231,145,46)" fg:x="53511" fg:w="677"/><text x="86.8794%" y="79.50"></text></g><g><title>rust-obj-terminal-viewer`alloc::raw_vec::RawVec&lt;rust_obj_terminal_viewer::general::positions_3d::Point,alloc::alloc::Global&gt;::reserve_for_push (5,897 samples, 9.55%)</title><rect x="78.8700%" y="133" width="9.5467%" height="15" fill="rgb(251,118,11)" fg:x="48718" fg:w="5897"/><text x="79.1200%" y="143.50">rust-obj-termi..</text></g><g><title>rust-obj-terminal-viewer`alloc::raw_vec::finish_grow (5,387 samples, 8.72%)</title><rect x="79.6956%" y="117" width="8.7211%" height="15" fill="rgb(217,147,25)" fg:x="49228" fg:w="5387"/><text x="79.9456%" y="127.50">rust-obj-ter..</text></g><g><title>rust-obj-terminal-viewer`std::alloc::__default_lib_allocator::__rdl_alloc (421 samples, 0.68%)</title><rect x="87.7351%" y="101" width="0.6816%" height="15" fill="rgb(247,81,37)" fg:x="54194" fg:w="421"/><text x="87.9851%" y="111.50"></text></g><g><title>rust-obj-terminal-viewer`rust_obj_terminal_viewer::renderer::pipeline::transformation::multiply_triangle_points_with_matrix (13,787 samples, 22.32%)</title><rect x="66.1680%" y="149" width="22.3199%" height="15" fill="rgb(209,12,38)" fg:x="40872" fg:w="13787"/><text x="66.4180%" y="159.50">rust-obj-terminal-viewer`rust_obj_t..</text></g><g><title>rust-obj-terminal-viewer`std::alloc::__default_lib_allocator::__rdl_dealloc (44 samples, 0.07%)</title><rect x="88.4167%" y="133" width="0.0712%" height="15" fill="rgb(227,1,9)" fg:x="54615" fg:w="44"/><text x="88.6667%" y="143.50"></text></g><g><title>rust-obj-terminal-viewer`rust_obj_terminal_viewer::renderer::interface::Renderer::start_rendering&lt;ref_mut$ (55,347 samples, 89.60%)</title><rect x="0.2412%" y="181" width="89.6017%" height="15" fill="rgb(248,47,43)" fg:x="149" fg:w="55347"/><text x="0.4912%" y="191.50">rust-obj-terminal-viewer`rust_obj_terminal_viewer::renderer::interface::Renderer::start_rendering&lt;ref_mut$</text></g><g><title>rust-obj-terminal-viewer`rust_obj_terminal_viewer::renderer::render::render_mesh (55,315 samples, 89.55%)</title><rect x="0.2930%" y="165" width="89.5499%" height="15" fill="rgb(221,10,30)" fg:x="181" fg:w="55315"/><text x="0.5430%" y="175.50">rust-obj-terminal-viewer`rust_obj_terminal_viewer::renderer::render::render_mesh</text></g><g><title>rust-obj-terminal-viewer`rust_obj_terminal_viewer::renderer::pipeline::transformation::triangle_intersects_screen_space (837 samples, 1.36%)</title><rect x="88.4879%" y="149" width="1.3550%" height="15" fill="rgb(210,229,1)" fg:x="54659" fg:w="837"/><text x="88.7379%" y="159.50"></text></g><g><title>ntdll`RtlAllocateHeap (85 samples, 0.14%)</title><rect x="90.2364%" y="165" width="0.1376%" height="15" fill="rgb(222,148,37)" fg:x="55739" fg:w="85"/><text x="90.4864%" y="175.50"></text></g><g><title>ntdll`RtlAllocateHeap (67 samples, 0.11%)</title><rect x="90.2655%" y="149" width="0.1085%" height="15" fill="rgb(234,67,33)" fg:x="55757" fg:w="67"/><text x="90.5155%" y="159.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (14 samples, 0.02%)</title><rect x="90.3513%" y="133" width="0.0227%" height="15" fill="rgb(247,98,35)" fg:x="55810" fg:w="14"/><text x="90.6013%" y="143.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (195 samples, 0.32%)</title><rect x="90.5359%" y="149" width="0.3157%" height="15" fill="rgb(247,138,52)" fg:x="55924" fg:w="195"/><text x="90.7859%" y="159.50"></text></g><g><title>ntdll`RtlFreeHeap (7 samples, 0.01%)</title><rect x="90.8402%" y="133" width="0.0113%" height="15" fill="rgb(213,79,30)" fg:x="56112" fg:w="7"/><text x="91.0902%" y="143.50"></text></g><g><title>ntdll`RtlFreeHeap (775 samples, 1.25%)</title><rect x="90.3740%" y="165" width="1.2547%" height="15" fill="rgb(246,177,23)" fg:x="55824" fg:w="775"/><text x="90.6240%" y="175.50"></text></g><g><title>ntdll`RtlMoveMemory (480 samples, 0.78%)</title><rect x="90.8515%" y="149" width="0.7771%" height="15" fill="rgb(230,62,27)" fg:x="56119" fg:w="480"/><text x="91.1015%" y="159.50"></text></g><g><title>rust-obj-terminal-viewer`alloc::raw_vec::RawVec&lt;rust_obj_terminal_viewer::general::positions_3d::Point,alloc::alloc::Global&gt;::reserve_for_push (31 samples, 0.05%)</title><rect x="91.6286%" y="165" width="0.0502%" height="15" fill="rgb(216,154,8)" fg:x="56599" fg:w="31"/><text x="91.8786%" y="175.50"></text></g><g><title>rust-obj-terminal-viewer`alloc::raw_vec::finish_grow (31 samples, 0.05%)</title><rect x="91.6286%" y="149" width="0.0502%" height="15" fill="rgb(244,35,45)" fg:x="56599" fg:w="31"/><text x="91.8786%" y="159.50"></text></g><g><title>ntdll`RtlReAllocateHeap (31 samples, 0.05%)</title><rect x="91.6286%" y="133" width="0.0502%" height="15" fill="rgb(251,115,12)" fg:x="56599" fg:w="31"/><text x="91.8786%" y="143.50"></text></g><g><title>ntdll`RtlReAllocateHeap (31 samples, 0.05%)</title><rect x="91.6286%" y="117" width="0.0502%" height="15" fill="rgb(240,54,50)" fg:x="56599" fg:w="31"/><text x="91.8786%" y="127.50"></text></g><g><title>ntdll`RtlReAllocateHeap (31 samples, 0.05%)</title><rect x="91.6286%" y="101" width="0.0502%" height="15" fill="rgb(233,84,52)" fg:x="56599" fg:w="31"/><text x="91.8786%" y="111.50"></text></g><g><title>ntdll`RtlMoveMemory (27 samples, 0.04%)</title><rect x="91.6351%" y="85" width="0.0437%" height="15" fill="rgb(207,117,47)" fg:x="56603" fg:w="27"/><text x="91.8851%" y="95.50"></text></g><g><title>rust-obj-terminal-viewer`alloc::raw_vec::RawVec&lt;rust_obj_terminal_viewer::general::positions_3d::Triangle,alloc::alloc::Global&gt;::reserve_for_push (57 samples, 0.09%)</title><rect x="91.6788%" y="165" width="0.0923%" height="15" fill="rgb(249,43,39)" fg:x="56630" fg:w="57"/><text x="91.9288%" y="175.50"></text></g><g><title>rust-obj-terminal-viewer`alloc::raw_vec::finish_grow (57 samples, 0.09%)</title><rect x="91.6788%" y="149" width="0.0923%" height="15" fill="rgb(209,38,44)" fg:x="56630" fg:w="57"/><text x="91.9288%" y="159.50"></text></g><g><title>ntdll`RtlReAllocateHeap (57 samples, 0.09%)</title><rect x="91.6788%" y="133" width="0.0923%" height="15" fill="rgb(236,212,23)" fg:x="56630" fg:w="57"/><text x="91.9288%" y="143.50"></text></g><g><title>ntdll`RtlReAllocateHeap (57 samples, 0.09%)</title><rect x="91.6788%" y="117" width="0.0923%" height="15" fill="rgb(242,79,21)" fg:x="56630" fg:w="57"/><text x="91.9288%" y="127.50"></text></g><g><title>ntdll`RtlReAllocateHeap (57 samples, 0.09%)</title><rect x="91.6788%" y="101" width="0.0923%" height="15" fill="rgb(211,96,35)" fg:x="56630" fg:w="57"/><text x="91.9288%" y="111.50"></text></g><g><title>ntdll`RtlMoveMemory (52 samples, 0.08%)</title><rect x="91.6869%" y="85" width="0.0842%" height="15" fill="rgb(253,215,40)" fg:x="56635" fg:w="52"/><text x="91.9369%" y="95.50"></text></g><g><title>ntdll`RtlAllocateHeap (9 samples, 0.01%)</title><rect x="91.9637%" y="117" width="0.0146%" height="15" fill="rgb(211,81,21)" fg:x="56806" fg:w="9"/><text x="92.2137%" y="127.50"></text></g><g><title>ntdll`RtlAllocateHeap (106 samples, 0.17%)</title><rect x="91.8310%" y="149" width="0.1716%" height="15" fill="rgb(208,190,38)" fg:x="56724" fg:w="106"/><text x="92.0810%" y="159.50"></text></g><g><title>ntdll`RtlAllocateHeap (91 samples, 0.15%)</title><rect x="91.8553%" y="133" width="0.1473%" height="15" fill="rgb(235,213,38)" fg:x="56739" fg:w="91"/><text x="92.1053%" y="143.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (15 samples, 0.02%)</title><rect x="91.9783%" y="117" width="0.0243%" height="15" fill="rgb(237,122,38)" fg:x="56815" fg:w="15"/><text x="92.2283%" y="127.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (47 samples, 0.08%)</title><rect x="92.1693%" y="117" width="0.0761%" height="15" fill="rgb(244,218,35)" fg:x="56933" fg:w="47"/><text x="92.4193%" y="127.50"></text></g><g><title>ntdll`RtlFreeHeap (201 samples, 0.33%)</title><rect x="92.1418%" y="133" width="0.3254%" height="15" fill="rgb(240,68,47)" fg:x="56916" fg:w="201"/><text x="92.3918%" y="143.50"></text></g><g><title>ntdll`RtlMoveMemory (137 samples, 0.22%)</title><rect x="92.2454%" y="117" width="0.2218%" height="15" fill="rgb(210,16,53)" fg:x="56980" fg:w="137"/><text x="92.4954%" y="127.50"></text></g><g><title>ntdll`RtlAllocateHeap (21 samples, 0.03%)</title><rect x="93.2103%" y="85" width="0.0340%" height="15" fill="rgb(235,124,12)" fg:x="57576" fg:w="21"/><text x="93.4603%" y="95.50"></text></g><g><title>ntdll`RtlAllocateHeap (338 samples, 0.55%)</title><rect x="92.7861%" y="117" width="0.5472%" height="15" fill="rgb(224,169,11)" fg:x="57314" fg:w="338"/><text x="93.0361%" y="127.50"></text></g><g><title>ntdll`RtlAllocateHeap (266 samples, 0.43%)</title><rect x="92.9027%" y="101" width="0.4306%" height="15" fill="rgb(250,166,2)" fg:x="57386" fg:w="266"/><text x="93.1527%" y="111.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (55 samples, 0.09%)</title><rect x="93.2443%" y="85" width="0.0890%" height="15" fill="rgb(242,216,29)" fg:x="57597" fg:w="55"/><text x="93.4943%" y="95.50"></text></g><g><title>rust-obj-terminal-viewer`core::str::iter::impl$60::next (141 samples, 0.23%)</title><rect x="93.3382%" y="117" width="0.2283%" height="15" fill="rgb(230,116,27)" fg:x="57655" fg:w="141"/><text x="93.5882%" y="127.50"></text></g><g><title>rust-obj-terminal-viewer`alloc::vec::spec_from_iter::impl$0::from_iter&lt;str,core::str::iter::Split (686 samples, 1.11%)</title><rect x="92.4705%" y="133" width="1.1106%" height="15" fill="rgb(228,99,48)" fg:x="57119" fg:w="686"/><text x="92.7205%" y="143.50"></text></g><g><title>rust-obj-terminal-viewer`std::alloc::__default_lib_allocator::__rdl_alloc (9 samples, 0.01%)</title><rect x="93.5665%" y="117" width="0.0146%" height="15" fill="rgb(253,11,6)" fg:x="57796" fg:w="9"/><text x="93.8165%" y="127.50"></text></g><g><title>rust-obj-terminal-viewer`alloc::vec::spec_from_iter::impl$0::from_iter&lt;array$&lt;enum2$&lt;core::option::Option&lt;usize&gt; &gt;,3&gt;,core::iter::adapters::map::Map&lt;core::slice::iter::Iter (1,223 samples, 1.98%)</title><rect x="91.7711%" y="165" width="1.9799%" height="15" fill="rgb(247,143,39)" fg:x="56687" fg:w="1223"/><text x="92.0211%" y="175.50">r..</text></g><g><title>rust-obj-terminal-viewer`rust_obj_terminal_viewer::renderer::obj_parser::parse_face_element_vertext_string (1,080 samples, 1.75%)</title><rect x="92.0026%" y="149" width="1.7484%" height="15" fill="rgb(236,97,10)" fg:x="56830" fg:w="1080"/><text x="92.2526%" y="159.50"></text></g><g><title>rust-obj-terminal-viewer`core::num::impl$31::from_str (105 samples, 0.17%)</title><rect x="93.5810%" y="133" width="0.1700%" height="15" fill="rgb(233,208,19)" fg:x="57805" fg:w="105"/><text x="93.8310%" y="143.50"></text></g><g><title>ntdll`RtlAllocateHeap (17 samples, 0.03%)</title><rect x="94.1250%" y="117" width="0.0275%" height="15" fill="rgb(216,164,2)" fg:x="58141" fg:w="17"/><text x="94.3750%" y="127.50"></text></g><g><title>ntdll`RtlAllocateHeap (244 samples, 0.40%)</title><rect x="93.8109%" y="149" width="0.3950%" height="15" fill="rgb(220,129,5)" fg:x="57947" fg:w="244"/><text x="94.0609%" y="159.50"></text></g><g><title>ntdll`RtlAllocateHeap (188 samples, 0.30%)</title><rect x="93.9016%" y="133" width="0.3044%" height="15" fill="rgb(242,17,10)" fg:x="58003" fg:w="188"/><text x="94.1516%" y="143.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (33 samples, 0.05%)</title><rect x="94.1525%" y="117" width="0.0534%" height="15" fill="rgb(242,107,0)" fg:x="58158" fg:w="33"/><text x="94.4025%" y="127.50"></text></g><g><title>rust-obj-terminal-viewer`core::num::dec2flt::float::impl$0::from_u64 (16 samples, 0.03%)</title><rect x="94.8227%" y="117" width="0.0259%" height="15" fill="rgb(251,28,31)" fg:x="58572" fg:w="16"/><text x="95.0727%" y="127.50"></text></g><g><title>rust-obj-terminal-viewer`core::num::dec2flt::number::Number::try_fast_path (206 samples, 0.33%)</title><rect x="94.5572%" y="133" width="0.3335%" height="15" fill="rgb(233,223,10)" fg:x="58408" fg:w="206"/><text x="94.8072%" y="143.50"></text></g><g><title>rust-obj-terminal-viewer`core::num::dec2flt::float::impl$0::pow10_fast_path (26 samples, 0.04%)</title><rect x="94.8486%" y="117" width="0.0421%" height="15" fill="rgb(215,21,27)" fg:x="58588" fg:w="26"/><text x="95.0986%" y="127.50"></text></g><g><title>rust-obj-terminal-viewer`core::num::dec2flt::dec2flt (723 samples, 1.17%)</title><rect x="94.2092%" y="149" width="1.1705%" height="15" fill="rgb(232,23,21)" fg:x="58193" fg:w="723"/><text x="94.4592%" y="159.50"></text></g><g><title>rust-obj-terminal-viewer`core::num::dec2flt::parse::parse_number (302 samples, 0.49%)</title><rect x="94.8907%" y="133" width="0.4889%" height="15" fill="rgb(244,5,23)" fg:x="58614" fg:w="302"/><text x="95.1407%" y="143.50"></text></g><g><title>rust-obj-terminal-viewer`alloc::vec::spec_from_iter::impl$0::from_iter&lt;f32,core::iter::adapters::filter_map::FilterMap&lt;core::slice::iter::Iter (1,021 samples, 1.65%)</title><rect x="93.7510%" y="165" width="1.6529%" height="15" fill="rgb(226,81,46)" fg:x="57910" fg:w="1021"/><text x="94.0010%" y="175.50"></text></g><g><title>rust-obj-terminal-viewer`std::alloc::__default_lib_allocator::__rdl_alloc (15 samples, 0.02%)</title><rect x="95.3796%" y="149" width="0.0243%" height="15" fill="rgb(247,70,30)" fg:x="58916" fg:w="15"/><text x="95.6296%" y="159.50"></text></g><g><title>ntdll`RtlAllocateHeap (90 samples, 0.15%)</title><rect x="95.4412%" y="149" width="0.1457%" height="15" fill="rgb(212,68,19)" fg:x="58954" fg:w="90"/><text x="95.6912%" y="159.50"></text></g><g><title>ntdll`RtlAllocateHeap (68 samples, 0.11%)</title><rect x="95.4768%" y="133" width="0.1101%" height="15" fill="rgb(240,187,13)" fg:x="58976" fg:w="68"/><text x="95.7268%" y="143.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (18 samples, 0.03%)</title><rect x="95.5577%" y="117" width="0.0291%" height="15" fill="rgb(223,113,26)" fg:x="59026" fg:w="18"/><text x="95.8077%" y="127.50"></text></g><g><title>rust-obj-terminal-viewer`alloc::vec::spec_from_iter::impl$0::from_iter&lt;ref$&lt;rust_obj_terminal_viewer::general::positions_3d::Point&gt;,core::iter::adapters::map::Map&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;array$&lt;enum2$&lt;core::option::Option (119 samples, 0.19%)</title><rect x="95.4039%" y="165" width="0.1927%" height="15" fill="rgb(206,192,2)" fg:x="58931" fg:w="119"/><text x="95.6539%" y="175.50"></text></g><g><title>VCRUNTIME140`memcmp (54 samples, 0.09%)</title><rect x="96.2895%" y="149" width="0.0874%" height="15" fill="rgb(241,108,4)" fg:x="59478" fg:w="54"/><text x="96.5395%" y="159.50"></text></g><g><title>ntdll`RtlAllocateHeap (23 samples, 0.04%)</title><rect x="96.8917%" y="117" width="0.0372%" height="15" fill="rgb(247,173,49)" fg:x="59850" fg:w="23"/><text x="97.1417%" y="127.50"></text></g><g><title>ntdll`RtlAllocateHeap (405 samples, 0.66%)</title><rect x="96.3769%" y="149" width="0.6557%" height="15" fill="rgb(224,114,35)" fg:x="59532" fg:w="405"/><text x="96.6269%" y="159.50"></text></g><g><title>ntdll`RtlAllocateHeap (301 samples, 0.49%)</title><rect x="96.5452%" y="133" width="0.4873%" height="15" fill="rgb(245,159,27)" fg:x="59636" fg:w="301"/><text x="96.7952%" y="143.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (64 samples, 0.10%)</title><rect x="96.9289%" y="117" width="0.1036%" height="15" fill="rgb(245,172,44)" fg:x="59873" fg:w="64"/><text x="97.1789%" y="127.50"></text></g><g><title>ntdll`RtlAllocateHeap (8 samples, 0.01%)</title><rect x="97.3385%" y="37" width="0.0130%" height="15" fill="rgb(236,23,11)" fg:x="60126" fg:w="8"/><text x="97.5885%" y="47.50"></text></g><g><title>ntdll`RtlAllocateHeap (98 samples, 0.16%)</title><rect x="97.2122%" y="69" width="0.1587%" height="15" fill="rgb(205,117,38)" fg:x="60048" fg:w="98"/><text x="97.4622%" y="79.50"></text></g><g><title>ntdll`RtlAllocateHeap (77 samples, 0.12%)</title><rect x="97.2462%" y="53" width="0.1247%" height="15" fill="rgb(237,72,25)" fg:x="60069" fg:w="77"/><text x="97.4962%" y="63.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (12 samples, 0.02%)</title><rect x="97.3515%" y="37" width="0.0194%" height="15" fill="rgb(244,70,9)" fg:x="60134" fg:w="12"/><text x="97.6015%" y="47.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (18 samples, 0.03%)</title><rect x="97.3757%" y="53" width="0.0291%" height="15" fill="rgb(217,125,39)" fg:x="60149" fg:w="18"/><text x="97.6257%" y="63.50"></text></g><g><title>ntdll`RtlFreeHeap (51 samples, 0.08%)</title><rect x="97.3709%" y="69" width="0.0826%" height="15" fill="rgb(235,36,10)" fg:x="60146" fg:w="51"/><text x="97.6209%" y="79.50"></text></g><g><title>ntdll`RtlMoveMemory (30 samples, 0.05%)</title><rect x="97.4049%" y="53" width="0.0486%" height="15" fill="rgb(251,123,47)" fg:x="60167" fg:w="30"/><text x="97.6549%" y="63.50"></text></g><g><title>ntdll`RtlReAllocateHeap (244 samples, 0.40%)</title><rect x="97.0682%" y="117" width="0.3950%" height="15" fill="rgb(221,13,13)" fg:x="59959" fg:w="244"/><text x="97.3182%" y="127.50"></text></g><g><title>ntdll`RtlReAllocateHeap (242 samples, 0.39%)</title><rect x="97.0714%" y="101" width="0.3918%" height="15" fill="rgb(238,131,9)" fg:x="59961" fg:w="242"/><text x="97.3214%" y="111.50"></text></g><g><title>ntdll`RtlReAllocateHeap (206 samples, 0.33%)</title><rect x="97.1297%" y="85" width="0.3335%" height="15" fill="rgb(211,50,8)" fg:x="59997" fg:w="206"/><text x="97.3797%" y="95.50"></text></g><g><title>rust-obj-terminal-viewer`alloc::raw_vec::impl$1::reserve::do_reserve_and_handle (276 samples, 0.45%)</title><rect x="97.0325%" y="149" width="0.4468%" height="15" fill="rgb(245,182,24)" fg:x="59937" fg:w="276"/><text x="97.2825%" y="159.50"></text></g><g><title>rust-obj-terminal-viewer`alloc::raw_vec::finish_grow (258 samples, 0.42%)</title><rect x="97.0617%" y="133" width="0.4177%" height="15" fill="rgb(242,14,37)" fg:x="59955" fg:w="258"/><text x="97.3117%" y="143.50"></text></g><g><title>rust-obj-terminal-viewer`std::alloc::__default_lib_allocator::__rdl_realloc (10 samples, 0.02%)</title><rect x="97.4632%" y="117" width="0.0162%" height="15" fill="rgb(246,228,12)" fg:x="60203" fg:w="10"/><text x="97.7132%" y="127.50"></text></g><g><title>rust-obj-terminal-viewer`core::slice::memchr::memchr_aligned (152 samples, 0.25%)</title><rect x="97.4794%" y="149" width="0.2461%" height="15" fill="rgb(213,55,15)" fg:x="60213" fg:w="152"/><text x="97.7294%" y="159.50"></text></g><g><title>VCRUNTIME140`memcmp (15 samples, 0.02%)</title><rect x="97.7967%" y="133" width="0.0243%" height="15" fill="rgb(209,9,3)" fg:x="60409" fg:w="15"/><text x="98.0467%" y="143.50"></text></g><g><title>rust-obj-terminal-viewer`core::slice::memchr::memchr_aligned (29 samples, 0.05%)</title><rect x="97.8209%" y="133" width="0.0469%" height="15" fill="rgb(230,59,30)" fg:x="60424" fg:w="29"/><text x="98.0709%" y="143.50"></text></g><g><title>rust-obj-terminal-viewer`core::str::iter::impl$60::next (90 samples, 0.15%)</title><rect x="97.7254%" y="149" width="0.1457%" height="15" fill="rgb(209,121,21)" fg:x="60365" fg:w="90"/><text x="97.9754%" y="159.50"></text></g><g><title>rust-obj-terminal-viewer`alloc::vec::spec_from_iter::impl$0::from_iter&lt;str,core::iter::adapters::filter::Filter&lt;core::str::iter::Split (1,426 samples, 2.31%)</title><rect x="95.5966%" y="165" width="2.3086%" height="15" fill="rgb(220,109,13)" fg:x="59050" fg:w="1426"/><text x="95.8466%" y="175.50">r..</text></g><g><title>rust-obj-terminal-viewer`std::alloc::__default_lib_allocator::__rdl_alloc (21 samples, 0.03%)</title><rect x="97.8711%" y="149" width="0.0340%" height="15" fill="rgb(232,18,1)" fg:x="60455" fg:w="21"/><text x="98.1211%" y="159.50"></text></g><g><title>rust-obj-terminal-viewer`rust_obj_terminal_viewer::general::positions_3d::Triangle::get_normal_2 (60 samples, 0.10%)</title><rect x="97.9051%" y="165" width="0.0971%" height="15" fill="rgb(215,41,42)" fg:x="60476" fg:w="60"/><text x="98.1551%" y="175.50"></text></g><g><title>rust-obj-terminal-viewer`std::alloc::__default_lib_allocator::__rdl_dealloc (9 samples, 0.01%)</title><rect x="98.0087%" y="165" width="0.0146%" height="15" fill="rgb(224,123,36)" fg:x="60540" fg:w="9"/><text x="98.2587%" y="175.50"></text></g><g><title>VCRUNTIME140`memcpy (27 samples, 0.04%)</title><rect x="98.3374%" y="133" width="0.0437%" height="15" fill="rgb(240,125,3)" fg:x="60743" fg:w="27"/><text x="98.5874%" y="143.50"></text></g><g><title>ntdll`RtlAllocateHeap (25 samples, 0.04%)</title><rect x="99.0141%" y="69" width="0.0405%" height="15" fill="rgb(205,98,50)" fg:x="61161" fg:w="25"/><text x="99.2641%" y="79.50"></text></g><g><title>ntdll`RtlAllocateHeap (392 samples, 0.63%)</title><rect x="98.5057%" y="101" width="0.6346%" height="15" fill="rgb(205,185,37)" fg:x="60847" fg:w="392"/><text x="98.7557%" y="111.50"></text></g><g><title>ntdll`RtlAllocateHeap (292 samples, 0.47%)</title><rect x="98.6676%" y="85" width="0.4727%" height="15" fill="rgb(238,207,15)" fg:x="60947" fg:w="292"/><text x="98.9176%" y="95.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (53 samples, 0.09%)</title><rect x="99.0546%" y="69" width="0.0858%" height="15" fill="rgb(213,199,42)" fg:x="61186" fg:w="53"/><text x="99.3046%" y="79.50"></text></g><g><title>ntdll`RtlReAllocateHeap (11 samples, 0.02%)</title><rect x="99.1404%" y="101" width="0.0178%" height="15" fill="rgb(235,201,11)" fg:x="61239" fg:w="11"/><text x="99.3904%" y="111.50"></text></g><g><title>ntdll`RtlReAllocateHeap (9 samples, 0.01%)</title><rect x="99.1436%" y="85" width="0.0146%" height="15" fill="rgb(207,46,11)" fg:x="61241" fg:w="9"/><text x="99.3936%" y="95.50"></text></g><g><title>ntdll`RtlReAllocateHeap (7 samples, 0.01%)</title><rect x="99.1468%" y="69" width="0.0113%" height="15" fill="rgb(241,35,35)" fg:x="61243" fg:w="7"/><text x="99.3968%" y="79.50"></text></g><g><title>rust-obj-terminal-viewer`std::alloc::__default_lib_allocator::__rdl_alloc (32 samples, 0.05%)</title><rect x="99.1582%" y="101" width="0.0518%" height="15" fill="rgb(243,32,47)" fg:x="61250" fg:w="32"/><text x="99.4082%" y="111.50"></text></g><g><title>rust-obj-terminal-viewer`alloc::raw_vec::impl$1::reserve::do_reserve_and_handle (513 samples, 0.83%)</title><rect x="98.3811%" y="133" width="0.8305%" height="15" fill="rgb(247,202,23)" fg:x="60770" fg:w="513"/><text x="98.6311%" y="143.50"></text></g><g><title>rust-obj-terminal-viewer`alloc::raw_vec::finish_grow (475 samples, 0.77%)</title><rect x="98.4426%" y="117" width="0.7690%" height="15" fill="rgb(219,102,11)" fg:x="60808" fg:w="475"/><text x="98.6926%" y="127.50"></text></g><g><title>rust-obj-terminal-viewer`core::slice::memchr::memchr_aligned (191 samples, 0.31%)</title><rect x="99.2116%" y="133" width="0.3092%" height="15" fill="rgb(243,110,44)" fg:x="61283" fg:w="191"/><text x="99.4616%" y="143.50"></text></g><g><title>rust-obj-terminal-viewer`core::str::converts::from_utf8 (85 samples, 0.14%)</title><rect x="99.5208%" y="133" width="0.1376%" height="15" fill="rgb(222,74,54)" fg:x="61474" fg:w="85"/><text x="99.7708%" y="143.50"></text></g><g><title>rust-obj-terminal-viewer`std::io::impl$0::drop (9 samples, 0.01%)</title><rect x="99.6584%" y="133" width="0.0146%" height="15" fill="rgb(216,99,12)" fg:x="61559" fg:w="9"/><text x="99.9084%" y="143.50"></text></g><g><title>rust-obj-terminal-viewer`rust_obj_terminal_viewer::renderer::obj_parser::ObjParser::parse_file (6,260 samples, 10.13%)</title><rect x="89.8430%" y="181" width="10.1344%" height="15" fill="rgb(226,22,26)" fg:x="55496" fg:w="6260"/><text x="90.0930%" y="191.50">rust-obj-termin..</text></g><g><title>rust-obj-terminal-viewer`std::io::impl$26::next&lt;std::io::buffered::bufreader::BufReader (1,207 samples, 1.95%)</title><rect x="98.0233%" y="165" width="1.9540%" height="15" fill="rgb(217,163,10)" fg:x="60549" fg:w="1207"/><text x="98.2733%" y="175.50">r..</text></g><g><title>rust-obj-terminal-viewer`std::io::append_to_string&lt;std::io::BufRead::read_line::closure_env$0&lt;std::io::buffered::bufreader::BufReader (1,144 samples, 1.85%)</title><rect x="98.1253%" y="149" width="1.8520%" height="15" fill="rgb(213,25,53)" fg:x="60612" fg:w="1144"/><text x="98.3753%" y="159.50">r..</text></g><g><title>rust-obj-terminal-viewer`std::sys::windows::handle::Handle::read_buf (188 samples, 0.30%)</title><rect x="99.6730%" y="133" width="0.3044%" height="15" fill="rgb(252,105,26)" fg:x="61568" fg:w="188"/><text x="99.9230%" y="143.50"></text></g><g><title>rust-obj-terminal-viewer`std::sys::windows::handle::Handle::synchronous_read (187 samples, 0.30%)</title><rect x="99.6746%" y="117" width="0.3027%" height="15" fill="rgb(220,39,43)" fg:x="61569" fg:w="187"/><text x="99.9246%" y="127.50"></text></g><g><title>ntdll`NtReadFile (187 samples, 0.30%)</title><rect x="99.6746%" y="101" width="0.3027%" height="15" fill="rgb(229,68,48)" fg:x="61569" fg:w="187"/><text x="99.9246%" y="111.50"></text></g><g><title>rust-obj-terminal-viewer`main (61,710 samples, 99.90%)</title><rect x="0.0793%" y="261" width="99.9029%" height="15" fill="rgb(252,8,32)" fg:x="49" fg:w="61710"/><text x="0.3293%" y="271.50">rust-obj-terminal-viewer`main</text></g><g><title>rust-obj-terminal-viewer`std::rt::lang_start_internal (61,710 samples, 99.90%)</title><rect x="0.0793%" y="245" width="99.9029%" height="15" fill="rgb(223,20,43)" fg:x="49" fg:w="61710"/><text x="0.3293%" y="255.50">rust-obj-terminal-viewer`std::rt::lang_start_internal</text></g><g><title>rust-obj-terminal-viewer`core::ops::function::FnOnce::call_once&lt;std::rt::lang_start::closure_env$0&lt;tuple$&lt;&gt; &gt;,tuple$ (61,710 samples, 99.90%)</title><rect x="0.0793%" y="229" width="99.9029%" height="15" fill="rgb(229,81,49)" fg:x="49" fg:w="61710"/><text x="0.3293%" y="239.50">rust-obj-terminal-viewer`core::ops::function::FnOnce::call_once&lt;std::rt::lang_start::closure_env$0&lt;tuple$&lt;&gt; &gt;,tuple$</text></g><g><title>rust-obj-terminal-viewer`std::sys_common::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$ (61,710 samples, 99.90%)</title><rect x="0.0793%" y="213" width="99.9029%" height="15" fill="rgb(236,28,36)" fg:x="49" fg:w="61710"/><text x="0.3293%" y="223.50">rust-obj-terminal-viewer`std::sys_common::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$</text></g><g><title>rust-obj-terminal-viewer`rust_obj_terminal_viewer::main (61,710 samples, 99.90%)</title><rect x="0.0793%" y="197" width="99.9029%" height="15" fill="rgb(249,185,26)" fg:x="49" fg:w="61710"/><text x="0.3293%" y="207.50">rust-obj-terminal-viewer`rust_obj_terminal_viewer::main</text></g><g><title>ucrtbase`exit (10 samples, 0.02%)</title><rect x="99.9822%" y="261" width="0.0162%" height="15" fill="rgb(249,174,33)" fg:x="61759" fg:w="10"/><text x="100.2322%" y="271.50"></text></g><g><title>ucrtbase`exit (10 samples, 0.02%)</title><rect x="99.9822%" y="245" width="0.0162%" height="15" fill="rgb(233,201,37)" fg:x="61759" fg:w="10"/><text x="100.2322%" y="255.50"></text></g><g><title>ucrtbase`mbsicmp_l (9 samples, 0.01%)</title><rect x="99.9838%" y="229" width="0.0146%" height="15" fill="rgb(221,78,26)" fg:x="61760" fg:w="9"/><text x="100.2338%" y="239.50"></text></g><g><title>ucrtbase`o_iswascii (9 samples, 0.01%)</title><rect x="99.9838%" y="213" width="0.0146%" height="15" fill="rgb(250,127,30)" fg:x="61760" fg:w="9"/><text x="100.2338%" y="223.50"></text></g><g><title>KERNELBASE`LoadLibraryExW (9 samples, 0.01%)</title><rect x="99.9838%" y="197" width="0.0146%" height="15" fill="rgb(230,49,44)" fg:x="61760" fg:w="9"/><text x="100.2338%" y="207.50"></text></g><g><title>ntdll`LdrLoadDll (9 samples, 0.01%)</title><rect x="99.9838%" y="181" width="0.0146%" height="15" fill="rgb(229,67,23)" fg:x="61760" fg:w="9"/><text x="100.2338%" y="191.50"></text></g><g><title>ntdll`RtlUnicodeToCustomCPN (9 samples, 0.01%)</title><rect x="99.9838%" y="165" width="0.0146%" height="15" fill="rgb(249,83,47)" fg:x="61760" fg:w="9"/><text x="100.2338%" y="175.50"></text></g><g><title>ntdll`RtlImageRvaToSection (9 samples, 0.01%)</title><rect x="99.9838%" y="149" width="0.0146%" height="15" fill="rgb(215,43,3)" fg:x="61760" fg:w="9"/><text x="100.2338%" y="159.50"></text></g><g><title>all (61,770 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(238,154,13)" fg:x="0" fg:w="61770"/><text x="0.2500%" y="335.50"></text></g><g><title>ntdll`RtlUserThreadStart (61,731 samples, 99.94%)</title><rect x="0.0631%" y="309" width="99.9369%" height="15" fill="rgb(219,56,2)" fg:x="39" fg:w="61731"/><text x="0.3131%" y="319.50">ntdll`RtlUserThreadStart</text></g><g><title>KERNEL32`BaseThreadInitThunk (61,725 samples, 99.93%)</title><rect x="0.0729%" y="293" width="99.9271%" height="15" fill="rgb(233,0,4)" fg:x="45" fg:w="61725"/><text x="0.3229%" y="303.50">KERNEL32`BaseThreadInitThunk</text></g><g><title>rust-obj-terminal-viewer`__scrt_common_main_seh (61,721 samples, 99.92%)</title><rect x="0.0793%" y="277" width="99.9207%" height="15" fill="rgb(235,30,7)" fg:x="49" fg:w="61721"/><text x="0.3293%" y="287.50">rust-obj-terminal-viewer`__scrt_common_main_seh</text></g></svg></svg>