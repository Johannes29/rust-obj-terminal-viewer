<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="390" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="373.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="373.00"> </text><svg id="frames" x="10" width="1180" total_samples="77042"><g><title>ntdll`LdrLoadDll (10 samples, 0.01%)</title><rect x="0.0039%" y="261" width="0.0130%" height="15" fill="rgb(227,0,7)" fg:x="3" fg:w="10"/><text x="0.2539%" y="271.50"></text></g><g><title>ntdll`RtlUnicodeToCustomCPN (10 samples, 0.01%)</title><rect x="0.0039%" y="245" width="0.0130%" height="15" fill="rgb(217,0,24)" fg:x="3" fg:w="10"/><text x="0.2539%" y="255.50"></text></g><g><title>ntdll`RtlImageRvaToSection (10 samples, 0.01%)</title><rect x="0.0039%" y="229" width="0.0130%" height="15" fill="rgb(221,193,54)" fg:x="3" fg:w="10"/><text x="0.2539%" y="239.50"></text></g><g><title>ntdll`RtlEnumerateEntryHashTable (9 samples, 0.01%)</title><rect x="0.0234%" y="261" width="0.0117%" height="15" fill="rgb(248,212,6)" fg:x="18" fg:w="9"/><text x="0.2734%" y="271.50"></text></g><g><title>ntdll`RtlEnumerateEntryHashTable (9 samples, 0.01%)</title><rect x="0.0234%" y="245" width="0.0117%" height="15" fill="rgb(208,68,35)" fg:x="18" fg:w="9"/><text x="0.2734%" y="255.50"></text></g><g><title>ntdll`RtlEnumerateEntryHashTable (9 samples, 0.01%)</title><rect x="0.0234%" y="229" width="0.0117%" height="15" fill="rgb(232,128,0)" fg:x="18" fg:w="9"/><text x="0.2734%" y="239.50"></text></g><g><title>ntdll`RtlImpersonateSelfEx (13 samples, 0.02%)</title><rect x="0.0415%" y="261" width="0.0169%" height="15" fill="rgb(207,160,47)" fg:x="32" fg:w="13"/><text x="0.2915%" y="271.50"></text></g><g><title>ntdll`LdrInitializeThunk (48 samples, 0.06%)</title><rect x="0.0000%" y="309" width="0.0623%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="48"/><text x="0.2500%" y="319.50"></text></g><g><title>ntdll`EtwLogTraceEvent (48 samples, 0.06%)</title><rect x="0.0000%" y="293" width="0.0623%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="48"/><text x="0.2500%" y="303.50"></text></g><g><title>ntdll`EtwLogTraceEvent (48 samples, 0.06%)</title><rect x="0.0000%" y="277" width="0.0623%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="48"/><text x="0.2500%" y="287.50"></text></g><g><title>ntdll`LdrInitializeThunk (49 samples, 0.06%)</title><rect x="0.0000%" y="325" width="0.0636%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="49"/><text x="0.2500%" y="335.50"></text></g><g><title>rust-obj-terminal-viewer`alloc::vec::impl$14::clone (49 samples, 0.06%)</title><rect x="0.1298%" y="181" width="0.0636%" height="15" fill="rgb(240,193,28)" fg:x="100" fg:w="49"/><text x="0.3798%" y="191.50"></text></g><g><title>rust-obj-terminal-viewer`rust_obj_terminal_viewer::renderer::interface::Renderer::set_mesh (91 samples, 0.12%)</title><rect x="0.0766%" y="197" width="0.1181%" height="15" fill="rgb(216,20,37)" fg:x="59" fg:w="91"/><text x="0.3266%" y="207.50"></text></g><g><title>rust-obj-terminal-viewer`rust_obj_terminal_viewer::renderer::events::get_events_from_queue (10 samples, 0.01%)</title><rect x="0.2155%" y="181" width="0.0130%" height="15" fill="rgb(206,188,39)" fg:x="166" fg:w="10"/><text x="0.4655%" y="191.50"></text></g><g><title>rust-obj-terminal-viewer`crossterm::event::poll (10 samples, 0.01%)</title><rect x="0.2155%" y="165" width="0.0130%" height="15" fill="rgb(217,207,13)" fg:x="166" fg:w="10"/><text x="0.4655%" y="175.50"></text></g><g><title>rust-obj-terminal-viewer`crossterm::event::read::InternalEventReader::poll (10 samples, 0.01%)</title><rect x="0.2155%" y="149" width="0.0130%" height="15" fill="rgb(231,73,38)" fg:x="166" fg:w="10"/><text x="0.4655%" y="159.50"></text></g><g><title>rust-obj-terminal-viewer`crossterm::event::source::windows::impl$1::try_read (10 samples, 0.01%)</title><rect x="0.2155%" y="133" width="0.0130%" height="15" fill="rgb(225,20,46)" fg:x="166" fg:w="10"/><text x="0.4655%" y="143.50"></text></g><g><title>rust-obj-terminal-viewer`rust_obj_terminal_viewer::renderer::pipeline::terminal_output::draw_char_buffer (15 samples, 0.02%)</title><rect x="0.2284%" y="181" width="0.0195%" height="15" fill="rgb(210,31,41)" fg:x="176" fg:w="15"/><text x="0.4784%" y="191.50"></text></g><g><title>rust-obj-terminal-viewer`rust_obj_terminal_viewer::renderer::pipeline::terminal_output::image_buffer_to_char_buffer (20 samples, 0.03%)</title><rect x="0.2479%" y="181" width="0.0260%" height="15" fill="rgb(221,200,47)" fg:x="191" fg:w="20"/><text x="0.4979%" y="191.50"></text></g><g><title>ucrtbase`ceilf (9 samples, 0.01%)</title><rect x="0.2622%" y="165" width="0.0117%" height="15" fill="rgb(226,26,5)" fg:x="202" fg:w="9"/><text x="0.5122%" y="175.50"></text></g><g><title>rust-obj-terminal-viewer`core::array::impl$24::map (131 samples, 0.17%)</title><rect x="1.4122%" y="165" width="0.1700%" height="15" fill="rgb(249,33,26)" fg:x="1088" fg:w="131"/><text x="1.6622%" y="175.50"></text></g><g><title>rust-obj-terminal-viewer`rust_obj_terminal_viewer::general::positions_3d::Triangle::add_point (4,110 samples, 5.33%)</title><rect x="1.5823%" y="165" width="5.3348%" height="15" fill="rgb(235,183,28)" fg:x="1219" fg:w="4110"/><text x="1.8323%" y="175.50">rust-ob..</text></g><g><title>rust-obj-terminal-viewer`rust_obj_terminal_viewer::general::positions_3d::Triangle::multiply_with_point (3,066 samples, 3.98%)</title><rect x="6.9170%" y="165" width="3.9796%" height="15" fill="rgb(221,5,38)" fg:x="5329" fg:w="3066"/><text x="7.1670%" y="175.50">rust..</text></g><g><title>KERNEL32`HeapFree (26 samples, 0.03%)</title><rect x="18.1745%" y="149" width="0.0337%" height="15" fill="rgb(247,18,42)" fg:x="14002" fg:w="26"/><text x="18.4245%" y="159.50"></text></g><g><title>ntdll`RtlAllocateHeap (761 samples, 0.99%)</title><rect x="28.2067%" y="117" width="0.9878%" height="15" fill="rgb(241,131,45)" fg:x="21731" fg:w="761"/><text x="28.4567%" y="127.50"></text></g><g><title>ntdll`RtlAllocateHeap (9,943 samples, 12.91%)</title><rect x="18.2083%" y="149" width="12.9059%" height="15" fill="rgb(249,31,29)" fg:x="14028" fg:w="9943"/><text x="18.4583%" y="159.50">ntdll`RtlAllocateHe..</text></g><g><title>ntdll`RtlAllocateHeap (7,603 samples, 9.87%)</title><rect x="21.2456%" y="133" width="9.8686%" height="15" fill="rgb(225,111,53)" fg:x="16368" fg:w="7603"/><text x="21.4956%" y="143.50">ntdll`RtlAlloc..</text></g><g><title>ntdll`RtlUnhandledExceptionFilter (1,479 samples, 1.92%)</title><rect x="29.1945%" y="117" width="1.9197%" height="15" fill="rgb(238,160,17)" fg:x="22492" fg:w="1479"/><text x="29.4445%" y="127.50">n..</text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (1,669 samples, 2.17%)</title><rect x="32.1578%" y="133" width="2.1664%" height="15" fill="rgb(214,148,48)" fg:x="24775" fg:w="1669"/><text x="32.4078%" y="143.50">n..</text></g><g><title>ntdll`RtlFreeHeap (124 samples, 0.16%)</title><rect x="34.1632%" y="117" width="0.1610%" height="15" fill="rgb(232,36,49)" fg:x="26320" fg:w="124"/><text x="34.4132%" y="127.50"></text></g><g><title>ntdll`RtlFreeHeap (7,176 samples, 9.31%)</title><rect x="31.1142%" y="149" width="9.3144%" height="15" fill="rgb(209,103,24)" fg:x="23971" fg:w="7176"/><text x="31.3642%" y="159.50">ntdll`RtlFree..</text></g><g><title>ntdll`RtlMoveMemory (4,703 samples, 6.10%)</title><rect x="34.3241%" y="133" width="6.1045%" height="15" fill="rgb(229,88,8)" fg:x="26444" fg:w="4703"/><text x="34.5741%" y="143.50">ntdll`Rt..</text></g><g><title>rust-obj-terminal-viewer`_rust_alloc (18 samples, 0.02%)</title><rect x="40.4286%" y="149" width="0.0234%" height="15" fill="rgb(213,181,19)" fg:x="31147" fg:w="18"/><text x="40.6786%" y="159.50"></text></g><g><title>rust-obj-terminal-viewer`_rust_dealloc (32 samples, 0.04%)</title><rect x="40.4520%" y="149" width="0.0415%" height="15" fill="rgb(254,191,54)" fg:x="31165" fg:w="32"/><text x="40.7020%" y="159.50"></text></g><g><title>rust-obj-terminal-viewer`alloc::slice::merge_sort&lt;ref$&lt;rust_obj_terminal_viewer::general::positions_2d::Point&gt;,alloc::slice::impl$0::sort_by::closure_env$0&lt;ref$ (7,682 samples, 9.97%)</title><rect x="40.4935%" y="149" width="9.9712%" height="15" fill="rgb(241,83,37)" fg:x="31197" fg:w="7682"/><text x="40.7435%" y="159.50">rust-obj-termi..</text></g><g><title>ntdll`KiUserCallbackDispatcher (15 samples, 0.02%)</title><rect x="50.4452%" y="133" width="0.0195%" height="15" fill="rgb(233,36,39)" fg:x="38864" fg:w="15"/><text x="50.6952%" y="143.50"></text></g><g><title>user32`SwitchToThisWindow (15 samples, 0.02%)</title><rect x="50.4452%" y="117" width="0.0195%" height="15" fill="rgb(226,3,54)" fg:x="38864" fg:w="15"/><text x="50.6952%" y="127.50"></text></g><g><title>user32`ClientThreadSetup (15 samples, 0.02%)</title><rect x="50.4452%" y="101" width="0.0195%" height="15" fill="rgb(245,192,40)" fg:x="38864" fg:w="15"/><text x="50.6952%" y="111.50"></text></g><g><title>KERNEL32`LoadAppInitDlls (15 samples, 0.02%)</title><rect x="50.4452%" y="85" width="0.0195%" height="15" fill="rgb(238,167,29)" fg:x="38864" fg:w="15"/><text x="50.6952%" y="95.50"></text></g><g><title>KERNEL32`LoadAppInitDlls (15 samples, 0.02%)</title><rect x="50.4452%" y="69" width="0.0195%" height="15" fill="rgb(232,182,51)" fg:x="38864" fg:w="15"/><text x="50.6952%" y="79.50"></text></g><g><title>KERNELBASE`AccessCheck (15 samples, 0.02%)</title><rect x="50.4452%" y="53" width="0.0195%" height="15" fill="rgb(231,60,39)" fg:x="38864" fg:w="15"/><text x="50.6952%" y="63.50"></text></g><g><title>ntdll`ZwAccessCheck (15 samples, 0.02%)</title><rect x="50.4452%" y="37" width="0.0195%" height="15" fill="rgb(208,69,12)" fg:x="38864" fg:w="15"/><text x="50.6952%" y="47.50"></text></g><g><title>ntdll`RtlAllocateHeap (144 samples, 0.19%)</title><rect x="62.4218%" y="69" width="0.1869%" height="15" fill="rgb(235,93,37)" fg:x="48091" fg:w="144"/><text x="62.6718%" y="79.50"></text></g><g><title>ntdll`RtlAllocateHeap (1,710 samples, 2.22%)</title><rect x="60.8525%" y="101" width="2.2196%" height="15" fill="rgb(213,116,39)" fg:x="46882" fg:w="1710"/><text x="61.1025%" y="111.50">n..</text></g><g><title>ntdll`RtlAllocateHeap (1,330 samples, 1.73%)</title><rect x="61.3458%" y="85" width="1.7263%" height="15" fill="rgb(222,207,29)" fg:x="47262" fg:w="1330"/><text x="61.5958%" y="95.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (357 samples, 0.46%)</title><rect x="62.6087%" y="69" width="0.4634%" height="15" fill="rgb(206,96,30)" fg:x="48235" fg:w="357"/><text x="62.8587%" y="79.50"></text></g><g><title>ntdll`RtlReAllocateHeap (8 samples, 0.01%)</title><rect x="63.0721%" y="101" width="0.0104%" height="15" fill="rgb(218,138,4)" fg:x="48592" fg:w="8"/><text x="63.3221%" y="111.50"></text></g><g><title>ntdll`RtlReAllocateHeap (8 samples, 0.01%)</title><rect x="63.0721%" y="85" width="0.0104%" height="15" fill="rgb(250,191,14)" fg:x="48592" fg:w="8"/><text x="63.3221%" y="95.50"></text></g><g><title>ntdll`RtlReAllocateHeap (8 samples, 0.01%)</title><rect x="63.0721%" y="69" width="0.0104%" height="15" fill="rgb(239,60,40)" fg:x="48592" fg:w="8"/><text x="63.3221%" y="79.50"></text></g><g><title>rust-obj-terminal-viewer`_rust_alloc (15 samples, 0.02%)</title><rect x="63.0825%" y="101" width="0.0195%" height="15" fill="rgb(206,27,48)" fg:x="48600" fg:w="15"/><text x="63.3325%" y="111.50"></text></g><g><title>rust-obj-terminal-viewer`std::alloc::__default_lib_allocator::__rdl_alloc (41 samples, 0.05%)</title><rect x="63.1032%" y="101" width="0.0532%" height="15" fill="rgb(225,35,8)" fg:x="48616" fg:w="41"/><text x="63.3532%" y="111.50"></text></g><g><title>rust-obj-terminal-viewer`alloc::raw_vec::RawVec&lt;usize,alloc::alloc::Global&gt;::reserve_for_push (2,171 samples, 2.82%)</title><rect x="60.3398%" y="133" width="2.8179%" height="15" fill="rgb(250,213,24)" fg:x="46487" fg:w="2171"/><text x="60.5898%" y="143.50">ru..</text></g><g><title>rust-obj-terminal-viewer`alloc::raw_vec::finish_grow (1,942 samples, 2.52%)</title><rect x="60.6371%" y="117" width="2.5207%" height="15" fill="rgb(247,123,22)" fg:x="46716" fg:w="1942"/><text x="60.8871%" y="127.50">ru..</text></g><g><title>rust-obj-terminal-viewer`rust_obj_terminal_viewer::renderer::pipeline::rasterization::get_y_values_from_edge (11,068 samples, 14.37%)</title><rect x="50.4647%" y="149" width="14.3662%" height="15" fill="rgb(231,138,38)" fg:x="38879" fg:w="11068"/><text x="50.7147%" y="159.50">rust-obj-terminal-view..</text></g><g><title>ucrtbase`ceilf (1,289 samples, 1.67%)</title><rect x="63.1578%" y="133" width="1.6731%" height="15" fill="rgb(231,145,46)" fg:x="48658" fg:w="1289"/><text x="63.4078%" y="143.50"></text></g><g><title>rust-obj-terminal-viewer`std::alloc::__default_lib_allocator::__rdl_alloc (496 samples, 0.64%)</title><rect x="64.8309%" y="149" width="0.6438%" height="15" fill="rgb(251,118,11)" fg:x="49947" fg:w="496"/><text x="65.0809%" y="159.50"></text></g><g><title>rust-obj-terminal-viewer`std::alloc::__default_lib_allocator::__rdl_dealloc (107 samples, 0.14%)</title><rect x="65.4747%" y="149" width="0.1389%" height="15" fill="rgb(217,147,25)" fg:x="50443" fg:w="107"/><text x="65.7247%" y="159.50"></text></g><g><title>rust-obj-terminal-viewer`rust_obj_terminal_viewer::renderer::pipeline::rasterization::render_triangle (43,108 samples, 55.95%)</title><rect x="10.8967%" y="165" width="55.9539%" height="15" fill="rgb(247,81,37)" fg:x="8395" fg:w="43108"/><text x="11.1467%" y="175.50">rust-obj-terminal-viewer`rust_obj_terminal_viewer::renderer::pipeline::rasterization::render..</text></g><g><title>ucrtbase`ceilf (953 samples, 1.24%)</title><rect x="65.6136%" y="149" width="1.2370%" height="15" fill="rgb(209,12,38)" fg:x="50550" fg:w="953"/><text x="65.8636%" y="159.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (643 samples, 0.83%)</title><rect x="77.0930%" y="133" width="0.8346%" height="15" fill="rgb(227,1,9)" fg:x="59394" fg:w="643"/><text x="77.3430%" y="143.50"></text></g><g><title>ntdll`RtlFreeHeap (53 samples, 0.07%)</title><rect x="77.8588%" y="117" width="0.0688%" height="15" fill="rgb(248,47,43)" fg:x="59984" fg:w="53"/><text x="78.1088%" y="127.50"></text></g><g><title>ntdll`RtlFreeHeap (2,666 samples, 3.46%)</title><rect x="76.5777%" y="149" width="3.4605%" height="15" fill="rgb(221,10,30)" fg:x="58997" fg:w="2666"/><text x="76.8277%" y="159.50">ntd..</text></g><g><title>ntdll`RtlMoveMemory (1,626 samples, 2.11%)</title><rect x="77.9276%" y="133" width="2.1105%" height="15" fill="rgb(210,229,1)" fg:x="60037" fg:w="1626"/><text x="78.1776%" y="143.50">n..</text></g><g><title>ntdll`RtlAllocateHeap (423 samples, 0.55%)</title><rect x="87.3835%" y="85" width="0.5491%" height="15" fill="rgb(222,148,37)" fg:x="67322" fg:w="423"/><text x="87.6335%" y="95.50"></text></g><g><title>ntdll`RtlAllocateHeap (6,264 samples, 8.13%)</title><rect x="81.4011%" y="117" width="8.1306%" height="15" fill="rgb(234,67,33)" fg:x="62713" fg:w="6264"/><text x="81.6511%" y="127.50">ntdll`RtlAl..</text></g><g><title>ntdll`RtlAllocateHeap (4,870 samples, 6.32%)</title><rect x="83.2105%" y="101" width="6.3212%" height="15" fill="rgb(247,98,35)" fg:x="64107" fg:w="4870"/><text x="83.4605%" y="111.50">ntdll`Rt..</text></g><g><title>ntdll`RtlUnhandledExceptionFilter (1,232 samples, 1.60%)</title><rect x="87.9326%" y="85" width="1.5991%" height="15" fill="rgb(247,138,52)" fg:x="67745" fg:w="1232"/><text x="88.1826%" y="95.50"></text></g><g><title>rust-obj-terminal-viewer`_rust_alloc (8 samples, 0.01%)</title><rect x="89.5317%" y="117" width="0.0104%" height="15" fill="rgb(213,79,30)" fg:x="68977" fg:w="8"/><text x="89.7817%" y="127.50"></text></g><g><title>rust-obj-terminal-viewer`alloc::raw_vec::RawVec&lt;rust_obj_terminal_viewer::general::positions_3d::Point,alloc::alloc::Global&gt;::reserve_for_push (7,774 samples, 10.09%)</title><rect x="80.0382%" y="149" width="10.0906%" height="15" fill="rgb(246,177,23)" fg:x="61663" fg:w="7774"/><text x="80.2882%" y="159.50">rust-obj-termin..</text></g><g><title>rust-obj-terminal-viewer`alloc::raw_vec::finish_grow (7,125 samples, 9.25%)</title><rect x="80.8806%" y="133" width="9.2482%" height="15" fill="rgb(230,62,27)" fg:x="62312" fg:w="7125"/><text x="81.1306%" y="143.50">rust-obj-term..</text></g><g><title>rust-obj-terminal-viewer`std::alloc::__default_lib_allocator::__rdl_alloc (452 samples, 0.59%)</title><rect x="89.5421%" y="117" width="0.5867%" height="15" fill="rgb(216,154,8)" fg:x="68985" fg:w="452"/><text x="89.7921%" y="127.50"></text></g><g><title>rust-obj-terminal-viewer`rust_obj_terminal_viewer::renderer::pipeline::transformation::multiply_triangle_points_with_matrix (18,009 samples, 23.38%)</title><rect x="66.8505%" y="165" width="23.3756%" height="15" fill="rgb(244,35,45)" fg:x="51503" fg:w="18009"/><text x="67.1005%" y="175.50">rust-obj-terminal-viewer`rust_obj_ter..</text></g><g><title>rust-obj-terminal-viewer`std::alloc::__default_lib_allocator::__rdl_dealloc (75 samples, 0.10%)</title><rect x="90.1288%" y="149" width="0.0973%" height="15" fill="rgb(251,115,12)" fg:x="69437" fg:w="75"/><text x="90.3788%" y="159.50"></text></g><g><title>rust-obj-terminal-viewer`rust_obj_terminal_viewer::renderer::interface::Renderer::start_rendering&lt;ref_mut$ (70,570 samples, 91.60%)</title><rect x="0.1947%" y="197" width="91.5994%" height="15" fill="rgb(240,54,50)" fg:x="150" fg:w="70570"/><text x="0.4447%" y="207.50">rust-obj-terminal-viewer`rust_obj_terminal_viewer::renderer::interface::Renderer::start_rendering&lt;ref_mut$</text></g><g><title>rust-obj-terminal-viewer`rust_obj_terminal_viewer::renderer::render::render_mesh (70,509 samples, 91.52%)</title><rect x="0.2739%" y="181" width="91.5202%" height="15" fill="rgb(233,84,52)" fg:x="211" fg:w="70509"/><text x="0.5239%" y="191.50">rust-obj-terminal-viewer`rust_obj_terminal_viewer::renderer::render::render_mesh</text></g><g><title>rust-obj-terminal-viewer`rust_obj_terminal_viewer::renderer::pipeline::transformation::triangle_intersects_screen_space (1,208 samples, 1.57%)</title><rect x="90.2261%" y="165" width="1.5680%" height="15" fill="rgb(207,117,47)" fg:x="69512" fg:w="1208"/><text x="90.4761%" y="175.50"></text></g><g><title>ntdll`RtlAllocateHeap (86 samples, 0.11%)</title><rect x="92.0654%" y="181" width="0.1116%" height="15" fill="rgb(249,43,39)" fg:x="70929" fg:w="86"/><text x="92.3154%" y="191.50"></text></g><g><title>ntdll`RtlAllocateHeap (66 samples, 0.09%)</title><rect x="92.0913%" y="165" width="0.0857%" height="15" fill="rgb(209,38,44)" fg:x="70949" fg:w="66"/><text x="92.3413%" y="175.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (15 samples, 0.02%)</title><rect x="92.1575%" y="149" width="0.0195%" height="15" fill="rgb(236,212,23)" fg:x="71000" fg:w="15"/><text x="92.4075%" y="159.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (181 samples, 0.23%)</title><rect x="92.3185%" y="165" width="0.2349%" height="15" fill="rgb(242,79,21)" fg:x="71124" fg:w="181"/><text x="92.5685%" y="175.50"></text></g><g><title>ntdll`RtlFreeHeap (12 samples, 0.02%)</title><rect x="92.5378%" y="149" width="0.0156%" height="15" fill="rgb(211,96,35)" fg:x="71293" fg:w="12"/><text x="92.7878%" y="159.50"></text></g><g><title>ntdll`RtlFreeHeap (810 samples, 1.05%)</title><rect x="92.1770%" y="181" width="1.0514%" height="15" fill="rgb(253,215,40)" fg:x="71015" fg:w="810"/><text x="92.4270%" y="191.50"></text></g><g><title>ntdll`RtlMoveMemory (520 samples, 0.67%)</title><rect x="92.5534%" y="165" width="0.6750%" height="15" fill="rgb(211,81,21)" fg:x="71305" fg:w="520"/><text x="92.8034%" y="175.50"></text></g><g><title>rust-obj-terminal-viewer`alloc::raw_vec::RawVec&lt;rust_obj_terminal_viewer::general::positions_3d::Point,alloc::alloc::Global&gt;::reserve_for_push (30 samples, 0.04%)</title><rect x="93.2297%" y="181" width="0.0389%" height="15" fill="rgb(208,190,38)" fg:x="71826" fg:w="30"/><text x="93.4797%" y="191.50"></text></g><g><title>rust-obj-terminal-viewer`alloc::raw_vec::finish_grow (30 samples, 0.04%)</title><rect x="93.2297%" y="165" width="0.0389%" height="15" fill="rgb(235,213,38)" fg:x="71826" fg:w="30"/><text x="93.4797%" y="175.50"></text></g><g><title>ntdll`RtlReAllocateHeap (30 samples, 0.04%)</title><rect x="93.2297%" y="149" width="0.0389%" height="15" fill="rgb(237,122,38)" fg:x="71826" fg:w="30"/><text x="93.4797%" y="159.50"></text></g><g><title>ntdll`RtlReAllocateHeap (30 samples, 0.04%)</title><rect x="93.2297%" y="133" width="0.0389%" height="15" fill="rgb(244,218,35)" fg:x="71826" fg:w="30"/><text x="93.4797%" y="143.50"></text></g><g><title>ntdll`RtlReAllocateHeap (30 samples, 0.04%)</title><rect x="93.2297%" y="117" width="0.0389%" height="15" fill="rgb(240,68,47)" fg:x="71826" fg:w="30"/><text x="93.4797%" y="127.50"></text></g><g><title>ntdll`RtlMoveMemory (26 samples, 0.03%)</title><rect x="93.2349%" y="101" width="0.0337%" height="15" fill="rgb(210,16,53)" fg:x="71830" fg:w="26"/><text x="93.4849%" y="111.50"></text></g><g><title>rust-obj-terminal-viewer`alloc::raw_vec::RawVec&lt;rust_obj_terminal_viewer::general::positions_3d::Triangle,alloc::alloc::Global&gt;::reserve_for_push (58 samples, 0.08%)</title><rect x="93.2686%" y="181" width="0.0753%" height="15" fill="rgb(235,124,12)" fg:x="71856" fg:w="58"/><text x="93.5186%" y="191.50"></text></g><g><title>rust-obj-terminal-viewer`alloc::raw_vec::finish_grow (58 samples, 0.08%)</title><rect x="93.2686%" y="165" width="0.0753%" height="15" fill="rgb(224,169,11)" fg:x="71856" fg:w="58"/><text x="93.5186%" y="175.50"></text></g><g><title>ntdll`RtlReAllocateHeap (58 samples, 0.08%)</title><rect x="93.2686%" y="149" width="0.0753%" height="15" fill="rgb(250,166,2)" fg:x="71856" fg:w="58"/><text x="93.5186%" y="159.50"></text></g><g><title>ntdll`RtlReAllocateHeap (58 samples, 0.08%)</title><rect x="93.2686%" y="133" width="0.0753%" height="15" fill="rgb(242,216,29)" fg:x="71856" fg:w="58"/><text x="93.5186%" y="143.50"></text></g><g><title>ntdll`RtlReAllocateHeap (58 samples, 0.08%)</title><rect x="93.2686%" y="117" width="0.0753%" height="15" fill="rgb(230,116,27)" fg:x="71856" fg:w="58"/><text x="93.5186%" y="127.50"></text></g><g><title>ntdll`RtlMoveMemory (51 samples, 0.07%)</title><rect x="93.2777%" y="101" width="0.0662%" height="15" fill="rgb(228,99,48)" fg:x="71863" fg:w="51"/><text x="93.5277%" y="111.50"></text></g><g><title>ntdll`RtlAllocateHeap (86 samples, 0.11%)</title><rect x="93.3906%" y="165" width="0.1116%" height="15" fill="rgb(253,11,6)" fg:x="71950" fg:w="86"/><text x="93.6406%" y="175.50"></text></g><g><title>ntdll`RtlAllocateHeap (66 samples, 0.09%)</title><rect x="93.4166%" y="149" width="0.0857%" height="15" fill="rgb(247,143,39)" fg:x="71970" fg:w="66"/><text x="93.6666%" y="159.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (17 samples, 0.02%)</title><rect x="93.4802%" y="133" width="0.0221%" height="15" fill="rgb(236,97,10)" fg:x="72019" fg:w="17"/><text x="93.7302%" y="143.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (41 samples, 0.05%)</title><rect x="93.6230%" y="133" width="0.0532%" height="15" fill="rgb(233,208,19)" fg:x="72129" fg:w="41"/><text x="93.8730%" y="143.50"></text></g><g><title>ntdll`RtlFreeHeap (189 samples, 0.25%)</title><rect x="93.5944%" y="149" width="0.2453%" height="15" fill="rgb(216,164,2)" fg:x="72107" fg:w="189"/><text x="93.8444%" y="159.50"></text></g><g><title>ntdll`RtlMoveMemory (126 samples, 0.16%)</title><rect x="93.6762%" y="133" width="0.1635%" height="15" fill="rgb(220,129,5)" fg:x="72170" fg:w="126"/><text x="93.9262%" y="143.50"></text></g><g><title>ntdll`RtlAllocateHeap (27 samples, 0.04%)</title><rect x="94.4783%" y="101" width="0.0350%" height="15" fill="rgb(242,17,10)" fg:x="72788" fg:w="27"/><text x="94.7283%" y="111.50"></text></g><g><title>ntdll`RtlAllocateHeap (356 samples, 0.46%)</title><rect x="94.1409%" y="133" width="0.4621%" height="15" fill="rgb(242,107,0)" fg:x="72528" fg:w="356"/><text x="94.3909%" y="143.50"></text></g><g><title>ntdll`RtlAllocateHeap (292 samples, 0.38%)</title><rect x="94.2239%" y="117" width="0.3790%" height="15" fill="rgb(251,28,31)" fg:x="72592" fg:w="292"/><text x="94.4739%" y="127.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (69 samples, 0.09%)</title><rect x="94.5134%" y="101" width="0.0896%" height="15" fill="rgb(233,223,10)" fg:x="72815" fg:w="69"/><text x="94.7634%" y="111.50"></text></g><g><title>rust-obj-terminal-viewer`core::str::iter::impl$60::next (143 samples, 0.19%)</title><rect x="94.6042%" y="133" width="0.1856%" height="15" fill="rgb(215,21,27)" fg:x="72885" fg:w="143"/><text x="94.8542%" y="143.50"></text></g><g><title>rust-obj-terminal-viewer`alloc::vec::spec_from_iter::impl$0::from_iter&lt;str,core::str::iter::Split (742 samples, 0.96%)</title><rect x="93.8410%" y="149" width="0.9631%" height="15" fill="rgb(232,23,21)" fg:x="72297" fg:w="742"/><text x="94.0910%" y="159.50"></text></g><g><title>rust-obj-terminal-viewer`std::alloc::__default_lib_allocator::__rdl_alloc (11 samples, 0.01%)</title><rect x="94.7899%" y="133" width="0.0143%" height="15" fill="rgb(244,5,23)" fg:x="73028" fg:w="11"/><text x="95.0399%" y="143.50"></text></g><g><title>rust-obj-terminal-viewer`alloc::vec::spec_from_iter::impl$0::from_iter&lt;array$&lt;enum2$&lt;core::option::Option&lt;usize&gt; &gt;,3&gt;,core::iter::adapters::map::Map&lt;core::slice::iter::Iter (1,215 samples, 1.58%)</title><rect x="93.3439%" y="181" width="1.5771%" height="15" fill="rgb(226,81,46)" fg:x="71914" fg:w="1215"/><text x="93.5939%" y="191.50"></text></g><g><title>rust-obj-terminal-viewer`rust_obj_terminal_viewer::renderer::obj_parser::parse_face_element_vertext_string (1,093 samples, 1.42%)</title><rect x="93.5022%" y="165" width="1.4187%" height="15" fill="rgb(247,70,30)" fg:x="72036" fg:w="1093"/><text x="93.7522%" y="175.50"></text></g><g><title>rust-obj-terminal-viewer`core::num::impl$31::from_str (90 samples, 0.12%)</title><rect x="94.8041%" y="149" width="0.1168%" height="15" fill="rgb(212,68,19)" fg:x="73039" fg:w="90"/><text x="95.0541%" y="159.50"></text></g><g><title>ntdll`RtlAllocateHeap (20 samples, 0.03%)</title><rect x="95.2234%" y="133" width="0.0260%" height="15" fill="rgb(240,187,13)" fg:x="73362" fg:w="20"/><text x="95.4734%" y="143.50"></text></g><g><title>ntdll`RtlAllocateHeap (269 samples, 0.35%)</title><rect x="94.9690%" y="165" width="0.3492%" height="15" fill="rgb(223,113,26)" fg:x="73166" fg:w="269"/><text x="95.2190%" y="175.50"></text></g><g><title>ntdll`RtlAllocateHeap (214 samples, 0.28%)</title><rect x="95.0404%" y="149" width="0.2778%" height="15" fill="rgb(206,192,2)" fg:x="73221" fg:w="214"/><text x="95.2904%" y="159.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (53 samples, 0.07%)</title><rect x="95.2493%" y="133" width="0.0688%" height="15" fill="rgb(241,108,4)" fg:x="73382" fg:w="53"/><text x="95.4993%" y="143.50"></text></g><g><title>rust-obj-terminal-viewer`core::num::dec2flt::float::impl$0::from_u64 (13 samples, 0.02%)</title><rect x="95.8205%" y="133" width="0.0169%" height="15" fill="rgb(247,173,49)" fg:x="73822" fg:w="13"/><text x="96.0705%" y="143.50"></text></g><g><title>rust-obj-terminal-viewer`core::num::dec2flt::number::Number::try_fast_path (206 samples, 0.27%)</title><rect x="95.5972%" y="149" width="0.2674%" height="15" fill="rgb(224,114,35)" fg:x="73650" fg:w="206"/><text x="95.8472%" y="159.50"></text></g><g><title>rust-obj-terminal-viewer`core::num::dec2flt::float::impl$0::pow10_fast_path (21 samples, 0.03%)</title><rect x="95.8373%" y="133" width="0.0273%" height="15" fill="rgb(245,159,27)" fg:x="73835" fg:w="21"/><text x="96.0873%" y="143.50"></text></g><g><title>rust-obj-terminal-viewer`core::num::dec2flt::dec2flt (723 samples, 0.94%)</title><rect x="95.3194%" y="165" width="0.9384%" height="15" fill="rgb(245,172,44)" fg:x="73436" fg:w="723"/><text x="95.5694%" y="175.50"></text></g><g><title>rust-obj-terminal-viewer`core::num::dec2flt::parse::parse_number (303 samples, 0.39%)</title><rect x="95.8646%" y="149" width="0.3933%" height="15" fill="rgb(236,23,11)" fg:x="73856" fg:w="303"/><text x="96.1146%" y="159.50"></text></g><g><title>rust-obj-terminal-viewer`alloc::vec::spec_from_iter::impl$0::from_iter&lt;f32,core::iter::adapters::filter_map::FilterMap&lt;core::slice::iter::Iter (1,057 samples, 1.37%)</title><rect x="94.9210%" y="181" width="1.3720%" height="15" fill="rgb(205,117,38)" fg:x="73129" fg:w="1057"/><text x="95.1710%" y="191.50"></text></g><g><title>rust-obj-terminal-viewer`std::alloc::__default_lib_allocator::__rdl_alloc (27 samples, 0.04%)</title><rect x="96.2579%" y="165" width="0.0350%" height="15" fill="rgb(237,72,25)" fg:x="74159" fg:w="27"/><text x="96.5079%" y="175.50"></text></g><g><title>ntdll`RtlAllocateHeap (100 samples, 0.13%)</title><rect x="96.3345%" y="165" width="0.1298%" height="15" fill="rgb(244,70,9)" fg:x="74218" fg:w="100"/><text x="96.5845%" y="175.50"></text></g><g><title>ntdll`RtlAllocateHeap (73 samples, 0.09%)</title><rect x="96.3695%" y="149" width="0.0948%" height="15" fill="rgb(217,125,39)" fg:x="74245" fg:w="73"/><text x="96.6195%" y="159.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (11 samples, 0.01%)</title><rect x="96.4500%" y="133" width="0.0143%" height="15" fill="rgb(235,36,10)" fg:x="74307" fg:w="11"/><text x="96.7000%" y="143.50"></text></g><g><title>rust-obj-terminal-viewer`alloc::vec::spec_from_iter::impl$0::from_iter&lt;ref$&lt;rust_obj_terminal_viewer::general::positions_3d::Point&gt;,core::iter::adapters::map::Map&lt;core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;array$&lt;enum2$&lt;core::option::Option (137 samples, 0.18%)</title><rect x="96.2929%" y="181" width="0.1778%" height="15" fill="rgb(251,123,47)" fg:x="74186" fg:w="137"/><text x="96.5429%" y="191.50"></text></g><g><title>VCRUNTIME140`memcmp (48 samples, 0.06%)</title><rect x="97.0003%" y="165" width="0.0623%" height="15" fill="rgb(221,13,13)" fg:x="74731" fg:w="48"/><text x="97.2503%" y="175.50"></text></g><g><title>ntdll`RtlAllocateHeap (24 samples, 0.03%)</title><rect x="97.4365%" y="133" width="0.0312%" height="15" fill="rgb(238,131,9)" fg:x="75067" fg:w="24"/><text x="97.6865%" y="143.50"></text></g><g><title>ntdll`RtlAllocateHeap (378 samples, 0.49%)</title><rect x="97.0626%" y="165" width="0.4906%" height="15" fill="rgb(211,50,8)" fg:x="74779" fg:w="378"/><text x="97.3126%" y="175.50"></text></g><g><title>ntdll`RtlAllocateHeap (280 samples, 0.36%)</title><rect x="97.1898%" y="149" width="0.3634%" height="15" fill="rgb(245,182,24)" fg:x="74877" fg:w="280"/><text x="97.4398%" y="159.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (66 samples, 0.09%)</title><rect x="97.4676%" y="133" width="0.0857%" height="15" fill="rgb(242,14,37)" fg:x="75091" fg:w="66"/><text x="97.7176%" y="143.50"></text></g><g><title>ntdll`RtlAllocateHeap (9 samples, 0.01%)</title><rect x="97.7973%" y="53" width="0.0117%" height="15" fill="rgb(246,228,12)" fg:x="75345" fg:w="9"/><text x="98.0473%" y="63.50"></text></g><g><title>ntdll`RtlAllocateHeap (83 samples, 0.11%)</title><rect x="97.7077%" y="85" width="0.1077%" height="15" fill="rgb(213,55,15)" fg:x="75276" fg:w="83"/><text x="97.9577%" y="95.50"></text></g><g><title>ntdll`RtlAllocateHeap (64 samples, 0.08%)</title><rect x="97.7324%" y="69" width="0.0831%" height="15" fill="rgb(209,9,3)" fg:x="75295" fg:w="64"/><text x="97.9824%" y="79.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (16 samples, 0.02%)</title><rect x="97.8285%" y="69" width="0.0208%" height="15" fill="rgb(230,59,30)" fg:x="75369" fg:w="16"/><text x="98.0785%" y="79.50"></text></g><g><title>ntdll`RtlFreeHeap (59 samples, 0.08%)</title><rect x="97.8155%" y="85" width="0.0766%" height="15" fill="rgb(209,121,21)" fg:x="75359" fg:w="59"/><text x="98.0655%" y="95.50"></text></g><g><title>ntdll`RtlMoveMemory (33 samples, 0.04%)</title><rect x="97.8492%" y="69" width="0.0428%" height="15" fill="rgb(220,109,13)" fg:x="75385" fg:w="33"/><text x="98.0992%" y="79.50"></text></g><g><title>ntdll`RtlReAllocateHeap (219 samples, 0.28%)</title><rect x="97.6260%" y="101" width="0.2843%" height="15" fill="rgb(232,18,1)" fg:x="75213" fg:w="219"/><text x="97.8760%" y="111.50"></text></g><g><title>ntdll`RtlMoveMemory (14 samples, 0.02%)</title><rect x="97.8921%" y="85" width="0.0182%" height="15" fill="rgb(215,41,42)" fg:x="75418" fg:w="14"/><text x="98.1421%" y="95.50"></text></g><g><title>ntdll`RtlReAllocateHeap (251 samples, 0.33%)</title><rect x="97.5870%" y="133" width="0.3258%" height="15" fill="rgb(224,123,36)" fg:x="75183" fg:w="251"/><text x="97.8370%" y="143.50"></text></g><g><title>ntdll`RtlReAllocateHeap (246 samples, 0.32%)</title><rect x="97.5935%" y="117" width="0.3193%" height="15" fill="rgb(240,125,3)" fg:x="75188" fg:w="246"/><text x="97.8435%" y="127.50"></text></g><g><title>rust-obj-terminal-viewer`alloc::raw_vec::impl$1::reserve::do_reserve_and_handle (286 samples, 0.37%)</title><rect x="97.5559%" y="165" width="0.3712%" height="15" fill="rgb(205,98,50)" fg:x="75159" fg:w="286"/><text x="97.8059%" y="175.50"></text></g><g><title>rust-obj-terminal-viewer`alloc::raw_vec::finish_grow (270 samples, 0.35%)</title><rect x="97.5766%" y="149" width="0.3505%" height="15" fill="rgb(205,185,37)" fg:x="75175" fg:w="270"/><text x="97.8266%" y="159.50"></text></g><g><title>rust-obj-terminal-viewer`std::alloc::__default_lib_allocator::__rdl_realloc (10 samples, 0.01%)</title><rect x="97.9141%" y="133" width="0.0130%" height="15" fill="rgb(238,207,15)" fg:x="75435" fg:w="10"/><text x="98.1641%" y="143.50"></text></g><g><title>rust-obj-terminal-viewer`core::slice::memchr::memchr_aligned (178 samples, 0.23%)</title><rect x="97.9271%" y="165" width="0.2310%" height="15" fill="rgb(213,199,42)" fg:x="75445" fg:w="178"/><text x="98.1771%" y="175.50"></text></g><g><title>rust-obj-terminal-viewer`core::str::iter::impl$60::next (92 samples, 0.12%)</title><rect x="98.1581%" y="165" width="0.1194%" height="15" fill="rgb(235,201,11)" fg:x="75623" fg:w="92"/><text x="98.4081%" y="175.50"></text></g><g><title>rust-obj-terminal-viewer`core::slice::memchr::memchr_aligned (37 samples, 0.05%)</title><rect x="98.2295%" y="149" width="0.0480%" height="15" fill="rgb(207,46,11)" fg:x="75678" fg:w="37"/><text x="98.4795%" y="159.50"></text></g><g><title>rust-obj-terminal-viewer`alloc::vec::spec_from_iter::impl$0::from_iter&lt;str,core::iter::adapters::filter::Filter&lt;core::str::iter::Split (1,411 samples, 1.83%)</title><rect x="96.4708%" y="181" width="1.8315%" height="15" fill="rgb(241,35,35)" fg:x="74323" fg:w="1411"/><text x="96.7208%" y="191.50">r..</text></g><g><title>rust-obj-terminal-viewer`std::alloc::__default_lib_allocator::__rdl_alloc (17 samples, 0.02%)</title><rect x="98.2802%" y="165" width="0.0221%" height="15" fill="rgb(243,32,47)" fg:x="75717" fg:w="17"/><text x="98.5302%" y="175.50"></text></g><g><title>rust-obj-terminal-viewer`rust_obj_terminal_viewer::general::positions_3d::Triangle::get_normal_2 (46 samples, 0.06%)</title><rect x="98.3022%" y="181" width="0.0597%" height="15" fill="rgb(247,202,23)" fg:x="75734" fg:w="46"/><text x="98.5522%" y="191.50"></text></g><g><title>rust-obj-terminal-viewer`std::alloc::__default_lib_allocator::__rdl_dealloc (8 samples, 0.01%)</title><rect x="98.3671%" y="181" width="0.0104%" height="15" fill="rgb(219,102,11)" fg:x="75784" fg:w="8"/><text x="98.6171%" y="191.50"></text></g><g><title>VCRUNTIME140`memcpy (22 samples, 0.03%)</title><rect x="98.6215%" y="149" width="0.0286%" height="15" fill="rgb(243,110,44)" fg:x="75980" fg:w="22"/><text x="98.8715%" y="159.50"></text></g><g><title>ntdll`RtlAllocateHeap (28 samples, 0.04%)</title><rect x="99.1057%" y="85" width="0.0363%" height="15" fill="rgb(222,74,54)" fg:x="76353" fg:w="28"/><text x="99.3557%" y="95.50"></text></g><g><title>ntdll`RtlAllocateHeap (381 samples, 0.49%)</title><rect x="98.7241%" y="117" width="0.4945%" height="15" fill="rgb(216,99,12)" fg:x="76059" fg:w="381"/><text x="98.9741%" y="127.50"></text></g><g><title>ntdll`RtlAllocateHeap (297 samples, 0.39%)</title><rect x="98.8331%" y="101" width="0.3855%" height="15" fill="rgb(226,22,26)" fg:x="76143" fg:w="297"/><text x="99.0831%" y="111.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (59 samples, 0.08%)</title><rect x="99.1420%" y="85" width="0.0766%" height="15" fill="rgb(217,163,10)" fg:x="76381" fg:w="59"/><text x="99.3920%" y="95.50"></text></g><g><title>ntdll`RtlReAllocateHeap (9 samples, 0.01%)</title><rect x="99.2186%" y="117" width="0.0117%" height="15" fill="rgb(213,25,53)" fg:x="76440" fg:w="9"/><text x="99.4686%" y="127.50"></text></g><g><title>rust-obj-terminal-viewer`std::alloc::__default_lib_allocator::__rdl_alloc (45 samples, 0.06%)</title><rect x="99.2303%" y="117" width="0.0584%" height="15" fill="rgb(252,105,26)" fg:x="76449" fg:w="45"/><text x="99.4803%" y="127.50"></text></g><g><title>rust-obj-terminal-viewer`alloc::raw_vec::impl$1::reserve::do_reserve_and_handle (493 samples, 0.64%)</title><rect x="98.6501%" y="149" width="0.6399%" height="15" fill="rgb(220,39,43)" fg:x="76002" fg:w="493"/><text x="98.9001%" y="159.50"></text></g><g><title>rust-obj-terminal-viewer`alloc::raw_vec::finish_grow (458 samples, 0.59%)</title><rect x="98.6955%" y="133" width="0.5945%" height="15" fill="rgb(229,68,48)" fg:x="76037" fg:w="458"/><text x="98.9455%" y="143.50"></text></g><g><title>rust-obj-terminal-viewer`core::slice::memchr::memchr_aligned (208 samples, 0.27%)</title><rect x="99.2900%" y="149" width="0.2700%" height="15" fill="rgb(252,8,32)" fg:x="76495" fg:w="208"/><text x="99.5400%" y="159.50"></text></g><g><title>rust-obj-terminal-viewer`core::str::converts::from_utf8 (104 samples, 0.13%)</title><rect x="99.5600%" y="149" width="0.1350%" height="15" fill="rgb(223,20,43)" fg:x="76703" fg:w="104"/><text x="99.8100%" y="159.50"></text></g><g><title>rust-obj-terminal-viewer`std::io::impl$26::next&lt;std::io::buffered::bufreader::BufReader (1,234 samples, 1.60%)</title><rect x="98.3775%" y="181" width="1.6017%" height="15" fill="rgb(229,81,49)" fg:x="75792" fg:w="1234"/><text x="98.6275%" y="191.50"></text></g><g><title>rust-obj-terminal-viewer`std::io::append_to_string&lt;std::io::BufRead::read_line::closure_env$0&lt;std::io::buffered::bufreader::BufReader (1,168 samples, 1.52%)</title><rect x="98.4632%" y="165" width="1.5161%" height="15" fill="rgb(236,28,36)" fg:x="75858" fg:w="1168"/><text x="98.7132%" y="175.50"></text></g><g><title>rust-obj-terminal-viewer`std::sys::windows::handle::Handle::read_buf (213 samples, 0.28%)</title><rect x="99.7028%" y="149" width="0.2765%" height="15" fill="rgb(249,185,26)" fg:x="76813" fg:w="213"/><text x="99.9528%" y="159.50"></text></g><g><title>rust-obj-terminal-viewer`std::sys::windows::handle::Handle::synchronous_read (212 samples, 0.28%)</title><rect x="99.7041%" y="133" width="0.2752%" height="15" fill="rgb(249,174,33)" fg:x="76814" fg:w="212"/><text x="99.9541%" y="143.50"></text></g><g><title>ntdll`NtReadFile (212 samples, 0.28%)</title><rect x="99.7041%" y="117" width="0.2752%" height="15" fill="rgb(233,201,37)" fg:x="76814" fg:w="212"/><text x="99.9541%" y="127.50"></text></g><g><title>rust-obj-terminal-viewer`rust_obj_terminal_viewer::renderer::obj_parser::ObjParser::parse_file (6,307 samples, 8.19%)</title><rect x="91.7941%" y="197" width="8.1864%" height="15" fill="rgb(221,78,26)" fg:x="70720" fg:w="6307"/><text x="92.0441%" y="207.50">rust-obj-te..</text></g><g><title>rust-obj-terminal-viewer`main (76,976 samples, 99.91%)</title><rect x="0.0727%" y="277" width="99.9143%" height="15" fill="rgb(250,127,30)" fg:x="56" fg:w="76976"/><text x="0.3227%" y="287.50">rust-obj-terminal-viewer`main</text></g><g><title>rust-obj-terminal-viewer`std::rt::lang_start_internal (76,976 samples, 99.91%)</title><rect x="0.0727%" y="261" width="99.9143%" height="15" fill="rgb(230,49,44)" fg:x="56" fg:w="76976"/><text x="0.3227%" y="271.50">rust-obj-terminal-viewer`std::rt::lang_start_internal</text></g><g><title>rust-obj-terminal-viewer`core::ops::function::FnOnce::call_once&lt;std::rt::lang_start::closure_env$0&lt;tuple$&lt;&gt; &gt;,tuple$ (76,976 samples, 99.91%)</title><rect x="0.0727%" y="245" width="99.9143%" height="15" fill="rgb(229,67,23)" fg:x="56" fg:w="76976"/><text x="0.3227%" y="255.50">rust-obj-terminal-viewer`core::ops::function::FnOnce::call_once&lt;std::rt::lang_start::closure_env$0&lt;tuple$&lt;&gt; &gt;,tuple$</text></g><g><title>rust-obj-terminal-viewer`std::sys_common::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$ (76,976 samples, 99.91%)</title><rect x="0.0727%" y="229" width="99.9143%" height="15" fill="rgb(249,83,47)" fg:x="56" fg:w="76976"/><text x="0.3227%" y="239.50">rust-obj-terminal-viewer`std::sys_common::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$</text></g><g><title>rust-obj-terminal-viewer`rust_obj_terminal_viewer::main (76,976 samples, 99.91%)</title><rect x="0.0727%" y="213" width="99.9143%" height="15" fill="rgb(215,43,3)" fg:x="56" fg:w="76976"/><text x="0.3227%" y="223.50">rust-obj-terminal-viewer`rust_obj_terminal_viewer::main</text></g><g><title>ucrtbase`exit (9 samples, 0.01%)</title><rect x="99.9870%" y="277" width="0.0117%" height="15" fill="rgb(238,154,13)" fg:x="77032" fg:w="9"/><text x="100.2370%" y="287.50"></text></g><g><title>ucrtbase`exit (9 samples, 0.01%)</title><rect x="99.9870%" y="261" width="0.0117%" height="15" fill="rgb(219,56,2)" fg:x="77032" fg:w="9"/><text x="100.2370%" y="271.50"></text></g><g><title>all (77,042 samples, 100%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(233,0,4)" fg:x="0" fg:w="77042"/><text x="0.2500%" y="351.50"></text></g><g><title>ntdll`RtlUserThreadStart (76,993 samples, 99.94%)</title><rect x="0.0636%" y="325" width="99.9364%" height="15" fill="rgb(235,30,7)" fg:x="49" fg:w="76993"/><text x="0.3136%" y="335.50">ntdll`RtlUserThreadStart</text></g><g><title>KERNEL32`BaseThreadInitThunk (76,992 samples, 99.94%)</title><rect x="0.0649%" y="309" width="99.9351%" height="15" fill="rgb(250,79,13)" fg:x="50" fg:w="76992"/><text x="0.3149%" y="319.50">KERNEL32`BaseThreadInitThunk</text></g><g><title>rust-obj-terminal-viewer`__scrt_common_main_seh (76,986 samples, 99.93%)</title><rect x="0.0727%" y="293" width="99.9273%" height="15" fill="rgb(211,146,34)" fg:x="56" fg:w="76986"/><text x="0.3227%" y="303.50">rust-obj-terminal-viewer`__scrt_common_main_seh</text></g></svg></svg>